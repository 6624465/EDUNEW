
@using Newtonsoft.Json;

@model EDU.Web.ViewModels.CustomerPaymentStatusModel.CustomerPaymentStatusVM
@{
    ViewBag.Title = "CustomerPaymentStatusList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    //WebGrid grid = new WebGrid(Model.customerPayment, rowsPerPage: 15);
    //grid.Pager(WebGridPagerModes.All);

    var cPayment = Model.customerPayment.Count();
    var myArray = (List<decimal?>)ViewData["Summary"];
}
@functions{
    public string ConvertToInt64dollar(decimal? data)
    {
        if (data != null && data != 0)
            return new HtmlString("$ " + Convert.ToInt64(data)).ToString();
        else
            return null;
    }
}

@{
    var listMonths = new List<SelectListItem>()
                                          {
                                           new SelectListItem {Text = "All",   Value = "0"},
                                           new SelectListItem {Text = "January",   Value = "1"},
                                           new SelectListItem {Text = "February", Value = "2"},
                                           new SelectListItem {Text = "March", Value = "3"},
                                           new SelectListItem {Text = "April",   Value = "4"},
                                           new SelectListItem {Text = "May", Value = "5"},
                                           new SelectListItem {Text = "June", Value = "6"},
                                           new SelectListItem {Text = "July",   Value = "7"},
                                           new SelectListItem {Text = "August", Value = "8"},
                                           new SelectListItem {Text = "September", Value = "9"},
                                           new SelectListItem {Text = "October",   Value = "10"},
                                           new SelectListItem {Text = "November", Value = "11"},
                                           new SelectListItem {Text = "December", Value = "12"}
                                       };
}
<style>
    .centerbox {
        margin: auto;
        width: 100%;
        border: 1px solid gray;
        border-radius: 20px;
    }

    .center {
        text-align: center !important;
    }

    .right {
        text-align: right !important;
    }

    .popover {
        color: black;
        min-width: 300px;
    }

    .popover-title {
        background-color: #F7F7F7;
        border-bottom: 1px solid #EBEBEB;
        border-radius: 5px 5px 0 0;
        font-size: 15px;
        font-weight: bold;
        line-height: 18px;
        margin: 0;
        padding: 8px 14px;
    }

    .bordertop {
        border-top: 2px solid gray !important;
        border-bottom: 2px solid gray !important;
        color: #D73925;
        /*font-family: 'Bebas Neue'*/
    }

    .table tfoot {
        display: block;
    }

    #tblCustomerPayment {
        font-weight: bold;
    }

        #tblCustomerPayment td {
            padding: 2px;
        }

        #tblCustomerPayment thead {
            background-color: powderblue;
            font-weight: bold;
            color: blue;
        }
</style>
@functions {

    public string ConvertToInt64(decimal? data)
    {
        if (data != null)
            return Convert.ToInt64(data.Value).ToString();
        else
            return null;
    }

    public string GetCourseName(string data)
    {
        var tcd = Model.trainingconfList.Where(x => x.IsActive == true && x.TrainingConfirmationID == data).FirstOrDefault();
        if (tcd != null)
        {
            var coursenamedtl = Model.courseList.Where(x => x.Id == tcd.Course && x.Product == tcd.Product && x.Country == tcd.Country).FirstOrDefault();
            return coursenamedtl != null ? coursenamedtl.CourseName : "";
        }
        else
            return "";
    }

    public string GetProductName(string data)
    {
        var tcd = Model.trainingconfList.Where(x => x.IsActive == true && x.TrainingConfirmationID == data).FirstOrDefault();
        if (tcd != null)
        {
            var productnamedtl = Model.productList.Where(x => x.Id == tcd.Product).FirstOrDefault();
            return productnamedtl != null ? productnamedtl.ProductName : "";
        }
        else
            return "";
    }

    public string GetCustomerName(int data)
    {
        var registrationdtl = Model.registrationList.Where(x => x.IsActive == true && x.RegistrationId == data).FirstOrDefault();
        if (registrationdtl != null)
        {
            var tcdtl = Model.trainingconfList.Where(x => x.TrainingConfirmationID == registrationdtl.TrainingConfirmationID).FirstOrDefault();
            if (tcdtl != null)
            {
                return tcdtl.Private ? registrationdtl.CompanyName : registrationdtl.StudentName;
            }
            return "";
        }
        return "";
    }
}
@using (Html.BeginForm("SaveCustomerPaymentStatus", "CustomerPaymentStatus", FormMethod.Post, new { id = "frmCustomerPaymentStatus", name = "frmCustomerPaymentStatus", enctype = "multipart/form-data", autocomplete = "off" }))
{
    <div class="page page-forms-elements">
        <div class="page-wrap">
            <div class="panel panel-default">
                <div class="box" id="grid">
                    <div class="box-header">
                        <div style="display:-webkit-inline-box">
                            <h4> Customer Payment Status</h4>
                        </div>
                        <div class="box-tools">
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="row">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span class="pull-right">Year</span>
                                </label>
                                <div class="col-md-1">
                                    @Html.DropDownListFor(x => x.customerPayment.FirstOrDefault().Year, Enumerable.Range(2014, 14).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control input-sm", onchange = "ChangeMonth();" })
                                </div>
                                <label class="col-md-1 control-label">
                                    <span class="pull-right">Month</span>
                                </label>
                                <div class="col-md-2">
                                    @Html.DropDownListFor(x => x.customerPayment.FirstOrDefault().Month, listMonths, new { @class = "form-control input-sm", onchange = "ChangeMonth();", style = "width:60%" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive">
                                    <table class="table-bordered" id="tblCustomerPayment" style="white-space:nowrap;width:100%">
                                        <thead style="cursor:pointer">
                                            <tr>
                                                @if (Session["RoleCode"].ToString() == "ADMIN" || Session["RoleCode"].ToString() == "FINANCE")
                                                {
                                                <td style='width:60px;'>#Action</td>
                                                }
                                                <td style='width:90px;'>Event ID</td>
                                                <td style='width:150px;'>Customer</td>
                                                <td style='width:90px;'>Product Name</td>
                                                <td style='width:200px;'>Course Name</td>
                                                <td style='width:88px;'>Invoice Amount</td>
                                                <td style='width:78px;'>Paid Amount</td>
                                                <td style='width:100px;'>Balance Amount</td>
                                                <td style='width:120px;'>Other Receivables</td>
                                                <td style='width:75px;'>Total Amount</td>
                                                <td style='width:70px;'>Due Date</td>
                                                <td style='width:90px;'>Receipt Date</td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{ int recCount = -1;}
                                            @foreach (var item in Model.customerPayment)
                                            {
                                                { recCount = recCount + 1; }
                                                <tr>
                                                    @if (Session["RoleCode"].ToString() == "ADMIN" || Session["RoleCode"].ToString() == "FINANCE")
                                                    {
                                                        <td>
                                                            <input type="hidden" id="hdncustomerpaymentId" value="@item.CustomerPaymentId" />
                                                            <button type="button" id="btn_edit_@recCount" class="btn btn-primary btn-xs waves-effect btn_edit " data-toggle="modal" data-object='@JsonConvert.SerializeObject(Model.customerPayment[recCount])' onclick="EditCustomerPaymentStatusDetail(this)"><i class="fa fa-pencil-square-o" style="padding-left: 5px;"></i></button>
                                                            if (item.CustomerPaymentId > 0)
                                                            {
                                                            <button type="button" class="btn btn-xs btn-danger waves-effect" onclick="DeleteCustomerPaymentStatus(@item.CustomerPaymentId)"><i class="fa fa-trash-o" style="padding-left: 5px;"></i></button>
                                                            }
                                                        </td>
                                                    }
                                                    <td>
                                                        @(item.TrainingConfirmationID)
                                                    </td>
                                                    <td>
                                                        @GetCustomerName(item.RegistrationId)
                                                    </td>
                                                    <td>
                                                        @GetProductName(item.TrainingConfirmationID)
                                                    </td>
                                                    <td>
                                                        @GetCourseName(item.TrainingConfirmationID)
                                                    </td>
                                                    <td class="center">
                                                        @ConvertToInt64dollar(item.InvoiceAmount)
                                                    </td>
                                                    <td class="center">
                                                        @ConvertToInt64dollar(item.PaidAmount)
                                                    </td>
                                                    <td class="center">
                                                        @ConvertToInt64dollar(item.BalanceAmount)
                                                    </td>
                                                    <td class="center">
                                                        @ConvertToInt64dollar(item.OtherReceivablesAmount)
                                                    </td>
                                                    <td class="center">
                                                        @ConvertToInt64dollar(item.TotalAmount)
                                                    </td>
                                                    <td class="center">
                                                        @(item.DueDate == null ? null : item.DueDate.Value.ToString("dd/MM/yyyy"))
                                                    </td>
                                                    <td class="center">
                                                        @(item.ReceiptDate == null ? null : item.ReceiptDate.Value.ToString("dd/MM/yyyy"))
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr class="bordertop">
                                                <td>Summary</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td class="center"></td>
                                                <td class="center"></td>
                                                <td class="center"></td>
                                                <td class="center"></td>
                                                <td class="center"></td>
                                                <td class="center"></td>
                                                <td class="center"></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="myModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">

    </div>
                                                }
@using (Html.BeginForm("DeleteCustomerPaymentStatus", "CustomerPaymentStatus", FormMethod.Post, new { id = "frmDeleteCustomerPaymentStatus", name = "frmDeleteCustomerPaymentStatus", enctype = "multipart/form-data" }))
{

}
@section SectionScripts
    {
    <script type="text/javascript">
        $('#tblCustomerPayment').DataTable({
            "bPaginate": false,

            footerCallback: function (row, data, start, end, display) {
                var api = this.api();
                // Remove the formatting to get integer data for summation
                var intVal = function (i) {

                    var amt= typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                    debugger;
                    return amt;

                };

                // Total over this page
                debugger
                if (api.column(5).data().length) {
                    var pageTotal5 = api
                        .column(5, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                }
                else { pageTotal5 = 0 };

                // Update footer
                $(api.column(5).footer()).html(
                    '$ ' + pageTotal5
                );

                // Total over this page

                if (api.column(6).data().length) {
                    var pageTotal6 = api
                        .column(6, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                }
                else { pageTotal6 = 0 };

                // Update footer
                $(api.column(6).footer()).html(
                    '$ ' + pageTotal6
                );

                // Total over this page

                if (api.column(7).data().length) {
                    var pageTotal7 = api
                        .column(7, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                }
                else { pageTotal7 = 0 };

                // Update footer
                $(api.column(7).footer()).html(
                    '$ ' + pageTotal7
                );

                // Total over this page

                if (api.column(8).data().length) {
                    var pageTotal8 = api
                        .column(8, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                }
                else { pageTotal8 = 0 };

                // Update footer
                $(api.column(8).footer()).html(
                    '$ ' + pageTotal8
                );

                // Total over this page

                if (api.column(9).data().length) {
                    var pageTotal9 = api
                        .column(9, { page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                }
                else { pageTotal9 = 0 };

                // Update footer
                $(api.column(9).footer()).html(
                    '$ ' + pageTotal9
                );
            }
        });

        $(function () {
            $('#liCustomerPaymentStatusList').addClass('active');
            $("#tblCustomerPayment tbody tr").each(function (i, row) {
                var $actualRow = $(row);
                if ($actualRow.find('#hdncustomerpaymentId').val() != -1) {
                    $actualRow.css('background-color', '#b3f7da');
                }
            });

            @*var myArray = @Html.Raw(JsonConvert.SerializeObject(myArray));
            @if (cPayment > 0)
        {
            <text>
            $('#customerPayment tbody').append('<tr class="bordertop"><td></td><td>Summary</td><td><td></td><td></td></td><td class="center"><span class="center">@ConvertToInt64dollar(myArray[0]) </span></td><td class="center"><span class="center">@ConvertToInt64dollar(myArray[1])</span></td><td class="center"><span class="center">@ConvertToInt64dollar(myArray[2])</span></td><td class="center"><span class="center">@ConvertToInt64dollar(myArray[3]) </span></td><td class="center"><span class="center">@ConvertToInt64dollar(myArray[4]) </span></td><td></td><td></td><td></td></tr>');
            </text>
            }*@
        });

        function mouseleave(el) {
            $(el).popover("hide");
        }

        function mouseover(el) {
            $(el).popover("show");
        }
        function ChangeMonth() {
            window.location = '@Url.Action("CustomerPaymentStatusList", "CustomerPaymentStatus", new { month = "", year = "" })' + '?month=' + $('#Month').val() + "&year=" + $('#Year').val();
        };

        //$(function () {
        //    $('#TrainingDetails').hide();
        //    $('#addbtn').attr('disabled', 'disabled');
        //    var trid = $('#TrainingConfirmationID').val();

        //    if (trid != null && trid != '') {
        //        $('#TrainingDetails').show();
        //    }
        //});

        @*function ChangeEventID(el) {
            $('#eventid').val(el.value);
            window.location = '@Url.Action("CustomerPaymentStatusList", "CustomerPaymentStatus", new { trainingConfirmationID = ""})' + '?trainingConfirmationID=' + el.value;
        };*@

        function EditCustomerPaymentStatusDetail(el) {
            var obj = $(el).data('object');
            $.ajax({
                url: '@Url.Content("~/CustomerPaymentStatus/CustomerPaymentStatusDetail/")',
                data: JSON.stringify(obj),
                method: 'post',
                contentType: 'application/json; charset=utf-8',
                success: function (html) {
                    $('#myModal').html(html);
                    $('#myModal').modal('show');
                    var invoiceamt = $('#InvoiceAmount').val();
                    $('#TotalAmount').val(invoiceamt);
                },
                error: function (err) {

                }
            });
        }

        function DeleteCustomerPaymentStatus(id) {
            swal({
                title: "Are you sure?",
                text: "Do you want delete?",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            },
      function () {
          $.ajax({
              url: '@Url.Content("~/CustomerPaymentStatus/DeleteCustomerPaymentStatus?CustomerPaymentId=")' + id,
              type: 'POST',
              contentType: 'application/json',
              success: function (data) {
                  if (data) {
                      swal("Deleted!", "Your Customer Payment record has been deleted.", "success");
                      location.reload();
                  }
              },
              error: function (e) {
              }
          });
      });
        }
        function CalculateTotalAmount() {
            var invoiceamt = parseInt($('#InvoiceAmount').val());
            var OtherReceivablesAmount = parseInt($('#OtherReceivablesAmount').val());
            var result = (isNaN(invoiceamt) ? 0 : invoiceamt) + (isNaN(OtherReceivablesAmount) ? 0 : OtherReceivablesAmount);
            $('#TotalAmount').val(result);
        }

        $('#frmCustomerPaymentStatus').validate({
            rules: {
                OtherReceivablesAmount: {
                    required: true
                }
            }
        });
        function SaveCustomerPaymentStatus(id) {
            if ($('#frmCustomerPaymentStatus').valid()) {
                RemoveDisabledFields();
                $('#frmCustomerPaymentStatus').submit();
            }

        }

        function RemoveDisabledFields() {
            $('#CustomerName').removeAttr('disabled');
            $('#InvoiceAmount').removeAttr('disabled');
            $('#PaidAmount').removeAttr('disabled');
            $('#BalanceAmount').removeAttr('disabled');
            $('#TotalAmount').removeAttr('disabled');
        }
    </script>
}




