@model EDU.Web.Models.TrainingConfirmation
<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 class="modal-title">Event Confirmation</h4>
        </div>
        <div class="modal-body" id="TrainerConfirmationModalBody">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.TrainingConfirmationID)
            @Html.HiddenFor(x => x.IsActive)
            @Html.HiddenFor(x => x.Year)
            @Html.HiddenFor(x => x.Month)
            <div class="row">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Event ID</span>
                    </label>
                    <div class="col-md-6">
                        @Html.TextBoxFor(x => x.TrainingConfirmationID, new { @class = "form-control input-sm", placeholder = "Event ID", @disabled = "disabled" })
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Country</span>
                    </label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(x => x.Country,
                    new SelectList((List<EZY.EDU.Contract.Branch>)ViewData["CountryData"], "BranchId", "BranchName"),
                    "Select Country", new { @class = "form-control input-sm", onchange = "CountryChange(this);", @style = "width:100%" })
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Product</span>
                    </label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(x => x.Product,
                    new SelectList((List<EZY.EDU.Contract.EduProduct>)ViewData["ProductData"], "Id", "ProductName"),
                    "Select Product", new { @class = "form-control input-sm", onchange = "ProductChange(this);", @style = "width:100%" })
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Course Name</span>
                    </label>
                    <div class="col-md-6">
                        @if (Model.Id == -1)
                        {
                            @Html.DropDownListFor(x => x.Course,
                                Enumerable.Empty<SelectListItem>(),
                                "Select Course",
                                new { @class = "form-control input-sm", disabled = "disabled", onchange = "ExamOrVocherDisbledFileds();CourseNameIsLabRental()", @style = "width:100%" })
                        }
                        else
                        {
                            @Html.DropDownListFor(x => x.Course,
                                new SelectList((List<EZY.EDU.Contract.CourseVm>)ViewData["CourseData"], "Id", "CourseName"),
                                "Select Course", new { @class = "form-control input-sm", onchange = "ExamOrVocherDisbledFileds();CourseNameIsLabRental()", @style = "width:100%" })
                        }


                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Number of Students</span>
                    </label>
                    <div class="col-md-6">
                        @Html.TextBoxFor(x => x.NoOfStudents, "{0:#.#}", new { @class = "form-control input-sm numCss", placeholder = "Number of Students" })
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Type</span>
                    </label>
                    <div class="col-md-6">
                        <input type="radio" name="type" id="rdoPrivate" title="Private" checked="@Model.Private" />
                        @Html.Label("Private")&nbsp;&nbsp;&nbsp;&nbsp;
                        <input type="radio" name="type" id="rdoPublic" title="Public" checked="@Model.Public" />
                        @Html.Label("Public")&nbsp;&nbsp;&nbsp;&nbsp;
                        <input type="radio" name="type" id="rdoLvc" title="LVC" checked="@Model.LVC" />
                        @Html.Label("LVC / TOD")
                        @Html.HiddenFor(x => x.Private)
                        @Html.HiddenFor(x => x.Public)
                        @Html.HiddenFor(x => x.LVC)
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Start Date</span>
                    </label>
                    <div class="col-md-6">
                        <div class="input-group date" id="StartDt">
                            @Html.TextBoxFor(x => x.StartDate, "{0:dd/MM/yyyy}", new { @class = "form-control input-sm dtCss" })
                            <span class="input-group-addon input-sm">
                                <i class="ion ion-calendar"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>End Date</span>
                    </label>
                    <div class="col-md-6">
                        <div class="input-group date" id="EndDt">
                            @Html.TextBoxFor(x => x.EndDate, "{0:dd/MM/yyyy}", new { @class = "form-control input-sm dtCss" })
                            <span class="input-group-addon input-sm">
                                <i class="ion ion-calendar"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Total # of days</span>
                    </label>
                    <div class="col-md-6">
                        @Html.TextBoxFor(x => x.TotalNoOfDays, "{0:#.#}", new { @class = "form-control input-sm numCss", placeholder = "Total # of days" })
                    </div>
                </div>
            </div>
            <div class="row css10">
                <div class="form-group">
                    <label class="col-md-3 control-label col-md-offset-1">
                        <span>Trainer Name</span>
                    </label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(x => x.TrianerId,
                    new SelectList((List<EDU.Web.Models.TrainerInformation>)ViewData["TrainerData"], "TrianerId", "TrainerName"),
                    "Select Trainer", new { @class = "form-control input-sm", @style = "width:100%" })
                    </div>
                </div>
            </div>
            <div class="modal-footer css10">
                <button type="button" id="btnSave" onclick="SaveTrainingConfirmation()" class="btn btn-success btn-frmt btn-sm"> <i class="fa fa-floppy-o"></i>&nbsp;Submit</button>
                <button type="button" class="btn btn-default btn-frmt btn-sm" data-dismiss="modal"><i class="fa fa-times"></i>Close</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        $("select").select2();
        @if (Model.Id == -1)
        {
            if (Session["AccessRights"].ToString() == "false")
            {
            <text>
            $("#Country").select2().select2("val", @Session["BranchId"].ToString());
            $('#Country').attr('disabled', 'disabled');
            </text>
            }
        }
        else
        {
            if (Session["AccessRights"].ToString() == "false")
            {
            <text>
            $('#Country').attr('disabled', 'disabled');
            </text>
            }
        }

        $('#StartDt').datepicker({
            icons: {
                time: 'fa fa-clock-o',
                date: 'fa fa-calendar',
                up: 'fa fa-arrow-up',
                down: 'fa fa-arrow-down'
                },
            //minDate: new Date(),
            format: 'dd/mm/yyyy',
            autoclose: true
        });

        $('#EndDt').datepicker({
            useCurrent: false, //Important! See issue #1075
            icons: {
                time: 'fa fa-clock-o',
                date: 'fa fa-calendar',
                up: 'fa fa-arrow-up',
                down: 'fa fa-arrow-down'
            },
            format: 'dd/mm/yyyy',
            autoclose: true
        });

        $('#StartDt').change(function () {
        //$("#StartDt").on("dp.change", function (e) {
            $('#EndDate').val('');
            //$('#EndDt').data("DatePicker").minDate(e.date);
        });

        @if (Model.Id != -1)
        {
             <text>
            @if (Model.StartDate != null)
            {
                            <text>
                $('#StartDate').val('@Model.StartDate.Value.ToString("dd/MM/yyyy")');</text>
            }
            @if (Model.EndDate != null)
            {
                        <text>
                $('#EndDate').val('@Model.EndDate.Value.ToString("dd/MM/yyyy")');</text>
            }
                //$('#Product').attr('disabled', 'disabled');
                //$('#Course').attr('disabled', 'disabled');
                debugger
                //ProductChangeOnLoad();
                var product = $('#Product').find("option:selected").text();
                var coursetext = $("#Course").find("option:selected").text();

                if ((coursetext.toLowerCase().indexOf("exam") != -1 || coursetext.toLowerCase().indexOf("voucher") != -1)) {
                    DisbledExamOrVocherFields();
                }

            </text>
        }
    });
    $('select').select2({}).on("change", function (e) {
        $(this).valid()
    });

    function CountryChange(el) {
        $('#Product').select2().select2("val", '');
        $('#Course').select2().empty();
        $('#Course').select2().append($('<option></option>').val('').html(''));
    }

    function ProductChange(el) {
        if (el.value) {
                $.ajax({
                    url: '@Url.Content("~/Master/GetCoursesByProductCoutry?Id=")' + el.value + '&country=' + $("#Country").val(),
                method: 'GET',
                contentType: 'application/json',
                success: function (data) {
                    $('#Course').select2().empty();
                    $('#Course').select2().append($('<option></option>').val('').html(''));
                    $.each(data, function (key, value) {
                        $('#Course').select2().append($('<option></option>').val(value.Id).html(value.CourseName));
                    });
                    $('#Course').removeAttr('disabled');
                },
                error: function (err) {

                }
            });
        }
        else {
            $('#Course').select2().empty();
            $('#Course').attr('disabled', 'disabled');
            $('#Course').select2().append($('<option></option>').val('').html(''));
        }
    }

    function ProductChangeOnLoad() {
            debugger;
                $.ajax({
                    url: '@Url.Content("~/Master/GetCoursesByProductCoutry?Id=")' + $("#Product").val() + '&country=' + $("#Country").val(),
                method: 'GET',
                contentType: 'application/json',
                success: function (data) {
                    var courseid = $('#Course').val();
                    $('#Course').select2().empty();
                    $('#Course').select2().append($('<option></option>').val('').html(''));
                    $.each(data, function (key, value) {
                        $('#Course').select2().append($('<option></option>').val(value.Id).html(value.CourseName));
                    });
                    $('#Course').select2().select2("val", courseid);
                },
                error: function (err) {

                }
            });
    }

</script>



