@model IEnumerable<EDU.Web.ViewModels.Trainer.TrainingConfirmationVM>

@{
    ViewBag.Title = "TrainingConfirmationList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    WebGrid grid = new WebGrid(Model, rowsPerPage: 12);
    grid.Pager(WebGridPagerModes.All);
}

@functions {
    public string TypeColumn(bool isPrivate, bool isPublic, bool islvc)
    {
        if (isPrivate)
            return "Private";
        else if (isPublic)
            return "Public";
        else if (islvc)
            return "LVC/TOD";
        return "";
    }
    public string validateDate(DateTime? date)
    {
        return date == null ? "" : date.Value.ToString("dd/MM/yyyy");
    }
    public string ConvertToInt64(decimal? data)
    {
        if (data != 0)
            return Convert.ToInt64(data.Value).ToString();
        else
            return "";
    }
}
@{
    var listMonths = new List<SelectListItem>()
                                          {
                                           new SelectListItem {Text = "All",   Value = "0"},
                                           new SelectListItem {Text = "January",   Value = "1"},
                                           new SelectListItem {Text = "February", Value = "2"},
                                           new SelectListItem {Text = "March", Value = "3"},
                                           new SelectListItem {Text = "April",   Value = "4"},
                                           new SelectListItem {Text = "May", Value = "5"},
                                           new SelectListItem {Text = "June", Value = "6"},
                                           new SelectListItem {Text = "July",   Value = "7"},
                                           new SelectListItem {Text = "August", Value = "8"},
                                           new SelectListItem {Text = "September", Value = "9"},
                                           new SelectListItem {Text = "October",   Value = "10"},
                                           new SelectListItem {Text = "November", Value = "11"},
                                           new SelectListItem {Text = "December", Value = "12"}
                                       };
}
<style>
    .bordertop {
        border-top: 2px solid gray !important;
        border-bottom: 2px solid gray !important;
        color: #D73925;
        /*font-family: 'Bebas Neue'*/
    }

    .popover {
        color: black;
        min-width: 500px;
    }

    .popover-title {
        background-color: #F7F7F7;
        border-bottom: 1px solid #EBEBEB;
        border-radius: 5px 5px 0 0;
        font-size: 15px;
        font-weight: bold;
        line-height: 18px;
        margin: 0;
        padding: 8px 14px;
    }

    .center {
        text-align: center !important;
    }

    .action {
        width: 50px;
    }
</style>
<div class="page">
    <div class="page-wrap">
        <div class="panel panel-default">
            <div class="box" id="grid">
                <div class="box-header">
                    <h4>Event Confirmation List</h4>
                    <div class="box-tools">
                        @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                        {
                            <button type="button" class="btn btn-info btn-sm waves-effect" data-toggle="modal" onclick="TrainerConfirmation()"><i class="fa fa-plus"></i>Add New Event Confirmation</button>
                        }
                    </div>
                </div>
                <div class="box-body">

                    <div class="row">
                        <div class="form-group">
                            <label class="col-md-1 control-label">
                                <span class="pull-right">Year</span>
                            </label>
                            <div class="col-md-1">
                                @Html.DropDownListFor(x => x.FirstOrDefault().Year, Enumerable.Range(2014, 14).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control input-sm", onchange = "ChangeMonth();" })
                            </div>
                            <label class="col-md-1 control-label">
                                <span class="pull-right">Month</span>
                            </label>
                            <div class="col-md-1">
                                @Html.DropDownListFor(x => x.FirstOrDefault().Month, listMonths, new { @class = "form-control input-sm", onchange = "ChangeMonth();" })
                            </div>
                        </div>
                    </div>
                    <div class="row css25">
                        <div class="col-md-12">
                            <div class="" style="overflow-x: scroll; width: 100%">
                                @grid.GetHtml(
                                columns: grid.Columns(

                             grid.Column("", "#Action", canSort: false,
                                format:
                                @<text>
                                    <div style="width:100px;">
                                        @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                                        {
                                            <button class="btn btn-xs btn-success waves-effect" onclick="EditTrainerConfirmation(@item.Id)"><i class="fa fa-pencil-square-o" style="padding-left: 5px;"></i></button>
                                            <button class="btn btn-xs btn-danger waves-effect" onclick="DeletetrainingConf(@item.Id)"><i class="fa fa-trash-o" style="padding-left: 5px;"></i></button>
                                        }
                                    </div>

                                </text>),

                    grid.Column("TrainingConfirmationID", "Event ID", canSort: true),
                       grid.Column("CountryName", "Country Name", canSort: true,
                                format:
                                @<text>
                                    <div style='width:110px;'>
                                        @item.CountryName
                                    </div>
                                </text>),
                    grid.Column("ProductName", "Product Name", canSort: true,
                                format:
                                @<text>
                                    <div style='width:110px;'>
                                        @item.ProductName
                                    </div>
                                </text>),
                    grid.Column("CourseName", "Course Name", canSort: true,
                                format:
                                @<text>
                                    <div style='width:300px;'>
                                        <span class="center">@item.CourseName</span>
                                    </div>
                                </text>, style: ""),
                    grid.Column("NoOfStudents", "No Of Students", canSort: true,
                                format:
                                @<text>
                                    <div style='width:100px;'>
                                        @item.NoOfStudents
                                    </div>
                                </text>, style: "center"),
                    grid.Column("Private", "Type", format: @<text>@TypeColumn(item.Private, item.Public, item.LVC)</text>, canSort: true),
                    grid.Column("StartDate", "Start Date", format:@<text>@validateDate(item.StartDate)</text>, canSort: true),
                    grid.Column("EndDate", "End Date", format:@<text> @validateDate(item.EndDate) </text>, canSort: true),
                    grid.Column("TotalNoOfDays", "Total # of days", canSort: true,
                                format:
                                @<text>
                                    <div style='width:100px;'>
                                        @ConvertToInt64(item.TotalNoOfDays)
                                    </div>
                                </text>, style: "center"),
                    grid.Column("TrianerName", "Trianer Name", canSort: true,
                    format:
                    @<text>
                        <div style='width:100px;'>
                            @item.TrianerName
                        </div>
                    </text>)),
                                tableStyle: "table")
                            </div>
                            <div class="row">
                                <div class="col-sm-12">
                                    <div class="pull-right">@grid.PagerList(mode: WebGridPagerModes.All, paginationStyle: "pagination pagination-sm")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("DeletetrainingConf", "Trainer", FormMethod.Post, new { id = "frmDelete", name = "frmDelete" }))
{
    <input type="hidden" id="id" name="id" />
}
@using (Html.BeginForm("SaveTrainingConfirmation", "Trainer", FormMethod.Post, new { id = "frmTrainerConfirmation", name = "frmTrainerConfirmation", autocomplete = "off" }))
{
    <div id="myModal" class="modal fade" role="dialog">

    </div>
}
@section SectionScripts{
    <script type="text/javascript">
        $(function () {
            $('#liTrainingConfirmationList').addClass('active');
        });
        function TrainerConfirmation() {
            debugger;
            $.ajax({
                url: '@Url.Content("~/Trainer/TrainerConfirmation?month=")' + $('#Month').val() + "&year=" + $('#Year').val() + '&Id=-1',
                method: 'get',
                contentType: 'text/html',
                success: function (html) {
                    $('#myModal').html(html);
                    $('#myModal').modal('show');
                },
                error: function (err) {

                }
            });
        }

        function ChangeMonth() {
            window.location = '@Url.Action("TrainingConfirmationList", "Trainer", new { month = "", year = "" })' + '?month=' + $('#Month').val() + "&year=" + $('#Year').val();
        };

        function EditTrainerConfirmation(Id) {
            $.ajax({
                url: '@Url.Content("~/Trainer/TrainerConfirmation?month=")' + $('#Month').val() + "&year=" + $('#Year').val() + '&Id=' + Id,
                method: 'get',
                contentType: 'text/html',
                success: function (html) {
                    $('#myModal').html(html);
                    $('#myModal').modal('show');
                },
                error: function (err) {

                }
            })
        }

        function DeletetrainingConf(Id) {
            //if (confirm("Are you sure, do you want delete?")) {
            //    $('#id').val(Id);
            //    $('#frmDelete').submit();
            //}
            swal({
                title: "Are you sure?",
                text: "Do you want delete?",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            },
       function () {
           $('#id').val(Id);
           $('#frmDelete').submit();
           swal("Deleted!", "Your Training Confirmation record has been deleted.", "success");

       });
        }

        function SaveTrainingConfirmation() {
            if ($('#frmTrainerConfirmation').valid()) {
                $('#Private').val($('#rdoPrivate').is(':checked'));
                $('#Public').val($('#rdoPublic').is(':checked'));
                $('#LVC').val($('#rdoLvc').is(':checked'));
                $('#frmTrainerConfirmation').submit();
            }
        }
        $('#frmTrainerConfirmation').validate({
            rules: {
                Product: {
                    required: true
                },
                Country: {
                    required: true
                },
                Course: {
                    required: true
                },
                TotalNoOfDays: {
                    required: true
                },
                StartDate: {
                    required: true
                },
                EndDate: {
                    required: true
                },
                NoOfStudents: {
                    required: true
                },
                TrianerId: {
                    required: true
                }

            }
        })

        function mouseleave(el) {
            $(el).popover("hide");
        }

        function mouseover(el) {
            $(el).popover("show");
        }
        function ExamOrVocherDisbledFileds() {
            debugger;
            var product = $('#Product').find("option:selected").text();
            var coursetext = $("#Course").find("option:selected").text();

            if (product.toLowerCase() == "other" && (coursetext.toLowerCase().indexOf("exam") != -1 || coursetext.toLowerCase().indexOf("voucher") != -1)) {
                DisbledExamOrVocherFields();
            }
            else {
                EnabledExamOrVocherFieldsFileds();

                $('#rdoPublic').prop('checked', true);
            }

        }

        function DisbledExamOrVocherFields() {
            $('#rdoPrivate').prop('checked', false);
            $('#rdoPublic').prop('checked', false);
            $('#rdoPublic').prop('checked', false);
            $('#StartDate').val('');
            $('#EndDate').val('');
            $('#TotalNoOfDays').val('');
            $('#TrianerId').val('');
            $('#rdoPrivate').attr('disabled', 'disabled');
            $('#rdoPublic').attr('disabled', 'disabled');
            $('#rdoLvc').attr('disabled', 'disabled');
            $('#StartDate').attr('disabled', 'disabled');
            $('#EndDate').attr('disabled', 'disabled');
            $('#TotalNoOfDays').attr('disabled', 'disabled');
            $('#TrianerId').attr('disabled', 'disabled');
        }

        function EnabledExamOrVocherFieldsFileds() {
            $('#rdoPrivate').removeAttr('disabled');
            $('#rdoPublic').removeAttr('disabled');
            $('#rdoLvc').removeAttr('disabled');
            $('#StartDate').removeAttr('disabled');
            $('#EndDate').removeAttr('disabled');
            $('#TotalNoOfDays').removeAttr('disabled');
            $('#TrianerId').removeAttr('disabled');
        }

        function CourseNameIsLabRental() {
            var coursetext = $("#Course").find("option:selected").text();
            if (coursetext.toLowerCase().indexOf("rental") != -1) {
                $('#rdoPrivate').prop('checked', true)
                $('#rdoPublic').prop('checked', false);
                $('#rdoLvc').prop('checked', false)
            }
            else
            {
                $('#rdoPublic').prop('checked', true);
            }

        }
    </script>

}