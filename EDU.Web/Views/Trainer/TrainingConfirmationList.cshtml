@model IEnumerable<EDU.Web.ViewModels.Trainer.TrainingConfirmationVM>

@{
    ViewBag.Title = "TrainingConfirmationList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions {
    public string TypeColumn(bool isPrivate, bool isPublic, bool islvc)
    {
        if (isPrivate)
            return "Private";
        else if (isPublic)
            return "Public";
        else if (islvc)
            return "LVC/TOD";
        return "";
    }
    public string validateDate(DateTime? date)
    {
        return date == null ? "" : date.Value.ToString("dd/MM/yyyy");
    }
    public string ConvertToInt64(decimal? data)
    {
        if (data != 0)
            return Convert.ToInt64(data.Value).ToString();
        else
            return "";
    }
}
@{
    var listMonths = new List<SelectListItem>()
                                  {
                                   new SelectListItem {Text = "All",   Value = "0"},
                                   new SelectListItem {Text = "January",   Value = "1"},
                                   new SelectListItem {Text = "February", Value = "2"},
                                   new SelectListItem {Text = "March", Value = "3"},
                                   new SelectListItem {Text = "April",   Value = "4"},
                                   new SelectListItem {Text = "May", Value = "5"},
                                   new SelectListItem {Text = "June", Value = "6"},
                                   new SelectListItem {Text = "July",   Value = "7"},
                                   new SelectListItem {Text = "August", Value = "8"},
                                   new SelectListItem {Text = "September", Value = "9"},
                                   new SelectListItem {Text = "October",   Value = "10"},
                                   new SelectListItem {Text = "November", Value = "11"},
                                   new SelectListItem {Text = "December", Value = "12"}
                               };
}
<style>
    .bordertop {
        border-top: 2px solid gray !important;
        border-bottom: 2px solid gray !important;
        color: #D73925;
        /*font-family: 'Bebas Neue'*/
    }

    .popover {
        color: black;
        min-width: 500px;
    }

    .popover-title {
        background-color: #F7F7F7;
        border-bottom: 1px solid #EBEBEB;
        border-radius: 5px 5px 0 0;
        font-size: 15px;
        font-weight: bold;
        line-height: 18px;
        margin: 0;
        padding: 8px 14px;
    }

    .center {
        text-align: center !important;
    }

    .action {
        width: 50px;
    }
    table {
        font-weight: bold;
    }

    thead > tr > td {
        font-weight: bold;
        color: blue;
    }
</style>
<div class="page">
    <div class="page-wrap">
        <div class="panel panel-default">
            <div class="box" id="grid">
                <div class="box-header">
                    <h4>Event Confirmation List</h4>
                    <div class="box-tools">
                        <button type="button" class="btn btn-primary btn-sm waves-effect" data-toggle="modal" onclick="PrintEventConfirmationList()"><i class="fa fa-print"></i>Print</button>

                        @if (Session["RoleCode"].ToString() == "ADMIN" || Session["RoleCode"].ToString() == "REGIONAL")
                        {
                            <button type="button" class="btn btn-info btn-sm waves-effect" data-toggle="modal" onclick="TrainerConfirmation()"><i class="fa fa-plus"></i>Add New Event Confirmation</button>
                        }
                    </div>
                </div>
                <div class="box-body">

                    <div class="row">
                        <div class="form-group">
                            <label class="col-md-1 control-label">
                                <span class="pull-right">Year</span>
                            </label>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => x.FirstOrDefault().Year, Enumerable.Range(2014, 14).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control input-sm", onchange = "ChangeMonth();", @style = "width:60%" })
                            </div>
                            <label class="col-md-1 control-label">
                                <span class="pull-right">Month</span>
                            </label>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => x.FirstOrDefault().Month, listMonths, new { @class = "form-control input-sm", onchange = "ChangeMonth();", @style = "width:70%" })
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-md-12">
                            <table class="display tablescroll" style="width:100%">
                                <thead style="cursor:pointer" class="nowrap">
                                    <tr>
                                        @if (Session["RoleCode"].ToString() == "ADMIN" || Session["RoleCode"].ToString() == "REGIONAL")
                                        {
                                            <td style='min-width:66px; '>#Action</td>
                                        }
                                        <td style='min-width:100px;'>Event ID</td>
                                        <td style='min-width:100px;'>Country Name</td>
                                        <td style='min-width:100px;'>Product Name</td>
                                        <td style='min-width:300px;'>Course Name</td>
                                        <td style='min-width:100px;'>No Of Students</td>
                                        <td style='min-width:80px;'>Type</td>
                                        <td style='min-width:100px;' class="center">Start Date</td>
                                        <td style='min-width:100px;' class="center">End Date</td>
                                        <td style='min-width:100px;'>Total # of days</td>
                                        <td style='min-width:150px;'>Trianer Name</td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            @if (Session["RoleCode"].ToString() == "ADMIN" || Session["RoleCode"].ToString() == "REGIONAL")
                                            {
                                                <td style='min-width:66px;'>
                                                    <button class="btn btn-xs btn-success waves-effect" onclick="EditTrainerConfirmation(@item.Id)"><i class="fa fa-pencil-square-o" style="padding-left: 5px;"></i></button>
                                                    <button class="btn btn-xs btn-danger waves-effect" onclick="DeletetrainingConf(@item.Id)"><i class="fa fa-trash-o" style="padding-left: 5px;"></i></button>

                                                </td>
                                            }
                                            <td style='min-width:100px;'>
                                                @(item.TrainingConfirmationID)
                                            </td>
                                            <td style='min-width:100px;'>
                                                @item.CountryName
                                            </td>
                                            <td style='min-width:100px;'>
                                                @item.ProductName
                                            </td>
                                            <td style="min-width:300px; max-width:300px;">

                                                @item.CourseName


                                            </td>
                                            <td style='min-width:100px;' class="center">
                                                @item.NoOfStudents
                                            </td>
                                            <td style='min-width:80px;'>
                                                @TypeColumn(item.Private, item.Public, item.LVC)
                                            </td>
                                            <td style='min-width:100px;' class="center">
                                                @validateDate(item.StartDate)
                                            </td>
                                            <td style='min-width:100px;' class="center">
                                                @validateDate(item.EndDate)
                                            </td>
                                            <td style='min-width:100px;' class="center">
                                                @ConvertToInt64(item.TotalNoOfDays)
                                            </td>
                                            <td style='min-width:150px;'>
                                                @item.TrianerName
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("DeletetrainingConf", "Trainer", FormMethod.Post, new { id = "frmDelete", name = "frmDelete" }))
{
    <input type="hidden" id="id" name="id" />
}
@using (Html.BeginForm("SaveTrainingConfirmation", "Trainer", FormMethod.Post, new { id = "frmTrainerConfirmation", name = "frmTrainerConfirmation", autocomplete = "off" }))
{
    <div id="myModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">

    </div>
}
@section SectionScripts{
    <script type="text/javascript">
        $(function () {
            $('#liTrainingConfirmationList').addClass('active');

            $('.tablescroll').DataTable({
                scrollY: '50vh',
                scrollCollapse: true,
                scrollX: true,
                paging: false
            });
        });
        function TrainerConfirmation() {
            debugger;
            $.ajax({
                url: '@Url.Content("~/Trainer/TrainerConfirmation?month=")' + $('#Month').val() + "&year=" + $('#Year').val() + '&Id=-1',
                method: 'get',
                contentType: 'text/html',
                success: function (html) {
                    $('#myModal').html(html);
                    $('#myModal').modal('show');
                },
                error: function (err) {

                }
            });
        }

        function ChangeMonth() {
            window.location = '@Url.Action("TrainingConfirmationList", "Trainer", new { month = "", year = "" })' + '?month=' + $('#Month').val() + "&year=" + $('#Year').val();
        };

        function EditTrainerConfirmation(Id) {
            $.ajax({
                url: '@Url.Content("~/Trainer/TrainerConfirmation?month=")' + $('#Month').val() + "&year=" + $('#Year').val() + '&Id=' + Id,
                method: 'get',
                contentType: 'text/html',
                success: function (html) {
                    $('#myModal').html(html);
                    $('#myModal').modal('show');
                },
                error: function (err) {

                }
            })
        }

        function PrintEventConfirmationList() {
            var country = null;
            @if (Session["AccessRights"].ToString() == "false")
            {
            <text>
                country = @Session["BranchId"].ToString();
            </text>
            }

            var year = $('#Year').val();
            var month = $('#Month').val() == 0 ? '' : $('#Month').val();
            debugger;
            $.ajax({
                url: '@Url.Content("~/Report/EventConfirmationReport?year=")' + year + '&month=' + month + '&country=' + country,
                method: 'get',
                contentType: 'text/html',
                success: function (html) {
                    $('#myModal').html(html);
                    $('#myModal').modal('show');
                },
                error: function (err) {
                }
            });
        }

        function DeletetrainingConf(Id) {
            //if (confirm("Are you sure, do you want delete?")) {
            //    $('#id').val(Id);
            //    $('#frmDelete').submit();
            //}
            swal({
                title: "Are you sure?",
                text: "Do you want delete?",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            },
       function () {
           $('#id').val(Id);
           $('#frmDelete').submit();
           swal("Deleted!", "Your Training Confirmation record has been deleted.", "success");

       });
        }

        function SaveTrainingConfirmation() {
            if ($('#frmTrainerConfirmation').valid()) {
                $('#btnSave').attr('disabled', 'disabled');
                $('#Country').removeAttr('disabled');
                $('#Private').val($('#rdoPrivate').is(':checked'));
                $('#Public').val($('#rdoPublic').is(':checked'));
                $('#LVC').val($('#rdoLvc').is(':checked'));
                $('#frmTrainerConfirmation').submit();
            }
        }

        $("#frmTrainerConfirmation").validate({
            rules: {
                Product: "required",
                Country: "required",
                Course: "required",
                TotalNoOfDays: "required",
                StartDate: "required",
                EndDate: "required",
                NoOfStudents: "required",
                TrianerId: "required"
            },
            highlight: function (element, errorClass, validClass) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().addClass(errorClass);
                } else {
                    elem.addClass(errorClass);
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().removeClass(errorClass);
                } else {
                    elem.removeClass(errorClass);
                }
            },
            errorPlacement: function (error, element) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    element = $("#select2-" + elem.attr("id") + "-container").parent();
                    error.insertAfter(element);
                } else {
                    error.insertAfter(element);
                }
            }
        });

        function mouseleave(el) {
            $(el).popover("hide");
        }

        function mouseover(el) {
            $(el).popover("show");
        }
        function ExamOrVocherDisbledFileds() {
            debugger;
            var product = $('#Product').find("option:selected").text();
            var coursetext = $("#Course").find("option:selected").text();

            if ((coursetext.toLowerCase().indexOf("exam") != -1 || coursetext.toLowerCase().indexOf("voucher") != -1)) {
                DisbledExamOrVocherFields();
            }
            else {
                EnabledExamOrVocherFieldsFileds();
                debugger;
                    $('#rdoPublic').prop('checked', true);
            }

        }

        function DisbledExamOrVocherFields() {
            debugger;
            $('#TotalNoOfDays').val('');
            $('#TrianerId').val('');
            $('#TotalNoOfDays').attr('disabled', 'disabled');
            $('#TrianerId').attr('disabled', 'disabled');
        }

        function EnabledExamOrVocherFieldsFileds() {
            debugger;
            $('#TotalNoOfDays').removeAttr('disabled');
            $('#TrianerId').removeAttr('disabled');
        }

        function CourseNameIsLabRental() {
            debugger;

            var coursetext = $("#Course").find("option:selected").text();
            if (coursetext.toLowerCase().indexOf("rental") != -1) {
                $('#rdoPrivate').prop('checked', true)
                $('#rdoPublic').prop('checked', false);
                $('#rdoLvc').prop('checked', false)
            }
            else {
                debugger;
                    $('#rdoPublic').prop('checked', true);
            }

        }
    </script>

}