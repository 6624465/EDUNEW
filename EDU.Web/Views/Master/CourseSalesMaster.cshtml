@model EDU.Web.ViewModels.Master.CourseSalesMasterVm
@{
    ViewBag.Title = "CourseSalesMaster";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page page-forms-elements">
    @using (Html.BeginForm("CoureSalesMaster", "Master", FormMethod.Post, new { id = "frmCourseDetail", name = "frmCourseDetail" }))
    {
        @Html.HiddenFor(x => x.courseSalesMaster.Id)
        <div class="page-wrap">
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default panel-hovered panel-stacked mb30">
                        <div class="panel-heading">Course Sales Master</div>
                        <div class="panel-body">
                            @*<form role="form" class="form-horizontal" action="javascript:;">*@
                            <!-- form horizontal acts as a row -->
                            <!-- normal control -->
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Country</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.courseSalesMaster.Country,
                                          new SelectList(Model.branchList, "BranchCode", "BranchName"),
                                       "Select Country",
                                      new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Product</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.courseSalesMaster.Product,
                                       new SelectList(Model.eduProductList, "Id", "ProductName"),
                                          "Select Product",
                                        new { @class = "form-control", onchange = "ProductChange(this);" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Course</span>
                                    </label>
                                    <div class="col-md-4">
                                        @if (Model.courseSalesMaster.Id == -1)
                                        {
                                            @Html.DropDownListFor(x => x.courseSalesMaster.Course,
                                Enumerable.Empty<SelectListItem>(),
                                "Select Course",
                                new { @class = "form-control", disabled = "disabled", onchange = "CourseChange(this)" })
                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(x => x.courseSalesMaster.Course,
                                                 new SelectList(Model.courseList, "Id", "CourseName"),
                                             "Select Course",
                                        new { @class = "form-control", onchange = "CourseChange(this)" })
                                        }
                                    </div>
                                </div>
                                <div class="col-md-2">

                                </div>

                                @*<div class="col-md-4">
                                        <div class="ui-radio ui-radio-primary">
                                            <label class="ui-radio-inline">
                                                <input type="radio" name="rdoGroup" id="rdoLVC" title="LVC" checked="@((Model.courseSalesMaster.LVC==null && Model.courseSalesMaster.TOD==null && Model.courseSalesMaster.ILT==null)?true: Model.courseSalesMaster.LVC)" onclick="todChange()" />
                                                @Html.Label("LVC")
                                            </label>
                                            <label class="ui-radio-inline">
                                                <input type="radio" name="rdoGroup" id="rdoTOD" title="TOD" checked="@Model.courseSalesMaster.TOD" onclick="todChange()" />
                                                @Html.Label("TOD")
                                            </label>
                                            <label class="ui-radio-inline">
                                                <input type="radio" name="rdoGroup" id="rdoILT" title="ILT" checked="@Model.courseSalesMaster.ILT" onclick="todChange()" />
                                                @Html.Label("ILT")
                                            </label>
                                        </div>
                                        @Html.HiddenFor(x => x.courseSalesMaster.LVC)
                                        @Html.HiddenFor(x => x.courseSalesMaster.TOD)
                                        @Html.HiddenFor(x => x.courseSalesMaster.ILT)
                                    </div>*@

                                <div class="col-md-4">
                                    <input type="radio" name="rdoGroup" id="rdoLVC" title="LVC" checked="@((Model.courseSalesMaster.LVC==null && Model.courseSalesMaster.TOD==null && Model.courseSalesMaster.ILT==null)?true: Model.courseSalesMaster.LVC)" onclick="todChange()" />
                                    @Html.Label("LVC")
                                    &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                                    <input type="radio" name="rdoGroup" id="rdoTOD" title="TOD" checked="@Model.courseSalesMaster.TOD" onclick="todChange()" />
                                    @Html.Label("TOD")
                                    &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                                    <input type="radio" name="rdoGroup" id="rdoILT" title="ILT" checked="@Model.courseSalesMaster.ILT" onclick="todChange()" />
                                    @Html.Label("ILT")

                                    @Html.HiddenFor(x => x.courseSalesMaster.LVC)
                                    @Html.HiddenFor(x => x.courseSalesMaster.TOD)
                                    @Html.HiddenFor(x => x.courseSalesMaster.ILT)
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">No Of Days</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.courseSalesMaster.NoOfDays, Enumerable.Range(0, 11).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), "Select NoOfDays ", new { @class = "form-control numCss", @disabled = "disabled" })
                                    </div>
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Month</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.courseSalesMaster.Month,
                                       new SelectList(Model.monthList, "Value", "Name"),
                                       "Select Month",
                                      new { @class = "form-control", @disabled = "disabled" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Start Date</span>
                                    </label>
                                    <div class="col-md-4">
                                        <div class="input-group date" id="StartDt">
                                            @Html.TextBoxFor(x => x.courseSalesMaster.StartDate, new { @class = "form-control dtCss" })
                                            <span class="input-group-addon">
                                                <i class="ion ion-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">End Date</span>
                                    </label>
                                    <div class="col-md-4">
                                        <div class="input-group date" id="EndDt">
                                            @Html.TextBoxFor(x => x.courseSalesMaster.EndDate, new { @class = "form-control dtCss" })
                                            <span class="input-group-addon">
                                                <i class="ion ion-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Min. Registrations</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.courseSalesMaster.MinimumReg, Enumerable.Range(1, 25).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), "Select Min.Registrations", new { @class = "form-control", onchange = "MinimumRegUser()" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Leads on hand</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(x => x.courseSalesMaster.LeadsOnHead, "{0:#.#}",
                                    new { @class = "form-control numCss" })
                                    </div>
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Registered</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.DropDownListFor(x => x.courseSalesMaster.Registered, Enumerable.Range(0, 26).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), "Select Registered", new { @class = "form-control", onchange = "RegisteredUser()" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Leads on hand Details</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.courseSalesMaster.LeadsOnHeadRemarks,
                                      new { @class = "form-control" })
                                    </div>
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Registration Details</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.courseSalesMaster.RegisteredRemarks,
                                    new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Available Seats</span>
                                    </label>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(x => x.courseSalesMaster.AvailableSeats,
                                 new { @class = "form-control numCss", @readonly = "readonly" })
                                    </div>
                                    <div class="col-md-2 control-label">
                                        <label class="pull-right">Revenue</label>
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(x => x.courseSalesMaster.Revenue, "{0:#.#}",
                        new { @class = "form-control numCss" })
                                    </div>
                                </div>
                            </div>
                            <div class="row css10">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span class="pull-right">Closing Date</span>
                                    </label>
                                    <div class="col-md-4">
                                        <div class="input-group date" id="RegClosingDt">
                                            @Html.TextBoxFor(x => x.courseSalesMaster.RegClosingDate, new { @class = "form-control dtCss" })
                                            <span class="input-group-addon">
                                                <i class="ion ion-calendar"></i>
                                            </span>
                                        </div>
                                    </div>

                                    @*<label class="col-md-2 control-label">
                                            <span class="pull-right">Closing Date</span>
                                        </label>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <div class="input-group date" id="RegClosingDt">
                                                    @Html.TextBoxFor(x => x.courseSalesMaster.RegClosingDate,
                                                   new { @class = "form-control dtCss" })
                                                    <span class="input-group-addon">
                                                        <span class="fa fa-calendar"></span>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>*@
                                    <div class="col-md-2">
                                    </div>
                                    <div class="col-md-4">
                                        <input type="radio" name="rdoConfirmGroup" id="rdoOpen" title="Open" checked="@((Model.courseSalesMaster.IsConfirm==null && Model.courseSalesMaster.IsDrop==null && Model.courseSalesMaster.IsOpen==null)?true: Model.courseSalesMaster.IsOpen)" />
                                        @Html.Label("Open")
                                        &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                                        <input type="radio" name="rdoConfirmGroup" id="rdoDrop" title="Drop" checked="@Model.courseSalesMaster.IsDrop" />
                                        @Html.Label("Drop")
                                        &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
                                        <input type="radio" name="rdoConfirmGroup" id="rdoConfirm" title="Confirm" checked="@Model.courseSalesMaster.IsConfirm" />
                                        @Html.Label("Confirm")

                                        @Html.HiddenFor(x => x.courseSalesMaster.IsOpen)
                                        @Html.HiddenFor(x => x.courseSalesMaster.IsDrop)
                                        @Html.HiddenFor(x => x.courseSalesMaster.IsConfirm)

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="text-center">
                                        <button type="button" onclick="SaveCourseSalesMaster()" class="btn btn-success btn-frmt green btn-sm"><i class="fa fa-floppy-o"></i>&nbsp;Save</button> &nbsp;&nbsp;&nbsp;
                                        <button class="btn btn-default btn-sm" type="button" onclick="location.href = '@Url.Content("~/Master/CourseSalesMasterList")'"><i class="fa fa-backward"></i>&nbsp;Back</button>&nbsp;&nbsp;&nbsp;
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@section SectionScripts{
    <script type="text/javascript">
        $(function () {
            $('#StartDt, #RegClosingDt').datetimepicker({
                icons: {
                    time: 'fa fa-clock-o',
                    date: 'fa fa-calendar',
                    up: 'fa fa-arrow-up',
                    down: 'fa fa-arrow-down'
                },
                minDate: new Date(),
                format: 'DD/MM/YYYY'
            });

            $('#EndDt').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                icons: {
                    time: 'fa fa-clock-o',
                    date: 'fa fa-calendar',
                    up: 'fa fa-arrow-up',
                    down: 'fa fa-arrow-down'
                },
                format: 'DD/MM/YYYY'
            });


            @if (Model.courseSalesMaster.Id != -1 && Model.courseSalesMaster.TOD.HasValue && Model.courseSalesMaster.TOD.Value) {
               if(Model.courseSalesMaster.IsConfirm==true)
                {
                    <text>
                        $('#courseSalesMaster_NoOfDays').attr('disabled', 'disabled');
                    </text>

                }
                else
                {
                    <text>
                        $('#courseSalesMaster_NoOfDays').removeAttr('disabled');
                    </text>
                }
            }
            @if (Model.courseSalesMaster.Id != -1)
            {
                <text>
            $('#EndDt').data("DateTimePicker").minDate($('#courseSalesMaster_StartDate').val());

            </text>
            }
            else
            {
                 <text>
            $('#EndDt').data("DateTimePicker").minDate(new Date());
            </text>
            }

            $("#StartDt").on("dp.change", function (e) {
                var d = $('#courseSalesMaster_StartDate').val();
                var m = d.toString().split("/")[1];
                var dmonth = parseInt(m);
                $('#courseSalesMaster_Month').val(dmonth - 1);
                $('#courseSalesMaster_EndDate').val('');
                $('#EndDt').data("DateTimePicker").minDate(e.date);
                //$('#courseSalesMaster_RegClosingDate').val(moment(e.date).subtract(14, 'days').format('DD/MM/YYYY'));
            });

            //$("#EndDt").on("dp.change", function (e) {
            //    $('#StartDt').data("DateTimePicker").maxDate(e.date);
            //});
        });

    function ConfirmAttrCoursesalesmaster() {
            $('#courseSalesMaster_Country').attr('disabled', 'disabled');
            $('#courseSalesMaster_Product').attr('disabled', 'disabled');
            $('#courseSalesMaster_Course').attr('disabled', 'disabled');
            $('#courseSalesMaster_NoOfDays').attr('disabled', 'disabled');
            $('#courseSalesMaster_Month').attr('disabled', 'disabled');
            $('#courseSalesMaster_StartDate').attr('disabled', 'disabled');
            $('#courseSalesMaster_EndDate').attr('disabled', 'disabled');
            $('#courseSalesMaster_MinimumReg').attr('disabled', 'disabled');
            $('#courseSalesMaster_LeadsOnHead').attr('disabled', 'disabled');
            $('#courseSalesMaster_LeadsOnHeadRemarks').attr('disabled', 'disabled');
            $('#courseSalesMaster_AvailableSeats').attr('disabled', 'disabled');
            $('#courseSalesMaster_RegClosingDate').attr('disabled', 'disabled');
            $('#courseSalesMaster_Revenue').attr('disabled', 'disabled');
            $('#rdoLVC').attr('disabled', 'disabled');
            $('#rdoTOD').attr('disabled', 'disabled');
            $('#rdoILT').attr('disabled', 'disabled');

            $('#rdoOpen').attr('disabled', 'disabled');
            $('#rdoDrop').attr('disabled', 'disabled');
            $('#rdoConfirm').attr('disabled', 'disabled');
        }


        @if(Model.courseSalesMaster.IsConfirm==true)
        {
            <text>
                ConfirmAttrCoursesalesmaster();
            </text>

        }
        function todChange() {
            debugger;
            $('#frmCourseDetail').valid();
            if (!$('#rdoLVC').is(':checked') && !$('#rdoILT').is(':checked')) {
                $('#courseSalesMaster_NoOfDays').removeAttr('disabled');
            }
            else {
                $('#courseSalesMaster_NoOfDays').attr('disabled', 'disabled');
                CourseChangeWrapper($('#courseSalesMaster_Course').val());
            }
        }

        $.validator.addMethod('validatelvctodsd', function () {
            debugger;
            if (!$('#rdoLVC').is(':checked') && !$('#rdoILT').is(':checked')) {
                return true;
            }
            else
                if ($('#courseSalesMaster_StartDate').val() == '')
                    return false;
                else
                    return true;

        }, 'Your error message!');

        $.validator.addMethod('validatelvctoded', function () {
            debugger;
            if (!$('#rdoLVC').is(':checked') && !$('#rdoILT').is(':checked')) {
                return true;
            }
            else
                if ($('#courseSalesMaster_EndDate').val() == '')
                    return false;
                else
                    return true;

        }, 'Your error message!');

        function SaveCourseSalesMaster() {
            $('#courseSalesMaster_LVC').val($('#rdoLVC').is(':checked'));
            $('#courseSalesMaster_TOD').val($('#rdoTOD').is(':checked'));
            $('#courseSalesMaster_ILT').val($('#rdoILT').is(':checked'));

            $('#courseSalesMaster_IsOpen').val($('#rdoOpen').is(':checked'));
            $('#courseSalesMaster_IsDrop').val($('#rdoDrop').is(':checked'));
            $('#courseSalesMaster_IsConfirm').val($('#rdoConfirm').is(':checked'));

            if ($('#frmCourseDetail').valid()) {
                $('#courseSalesMaster_NoOfDays').removeAttr('disabled');
                $('#courseSalesMaster_Month').removeAttr('disabled');
                SaveRemoveatrr();
                $('#frmCourseDetail').submit();
            }
        }

        function SaveRemoveatrr()
        {
            $('#courseSalesMaster_Country').removeAttr('disabled');
            $('#courseSalesMaster_Product').removeAttr('disabled');
            $('#courseSalesMaster_Course').removeAttr('disabled');
            $('#courseSalesMaster_NoOfDays').removeAttr('disabled');
            $('#courseSalesMaster_Month').removeAttr('disabled');
            $('#courseSalesMaster_StartDate').removeAttr('disabled');
            $('#courseSalesMaster_EndDate').removeAttr('disabled');
            $('#courseSalesMaster_MinimumReg').removeAttr('disabled');
            $('#courseSalesMaster_LeadsOnHead').removeAttr('disabled');
            $('#courseSalesMaster_LeadsOnHeadRemarks').removeAttr('disabled');
            $('#courseSalesMaster_AvailableSeats').removeAttr('disabled');
            $('#courseSalesMaster_RegClosingDate').removeAttr('disabled');
            $('#courseSalesMaster_Revenue').removeAttr('disabled');
            $('#rdoTOD').removeAttr('disabled');
            $('#rdoLVC').removeAttr('disabled');
            $('#rdoILT').removeAttr('disabled');

            $('#rdoOpen').removeAttr('disabled');
            $('#rdoDrop').removeAttr('disabled');
            $('#rdoConfirm').removeAttr('disabled');
        }

        $('#frmCourseDetail').validate({
            rules: {
                'courseSalesMaster.Country': {
                    required: true
                },
                'courseSalesMaster.Product': {
                    required: true
                },
                'courseSalesMaster.Course': {
                    required: true
                },
                'courseSalesMaster.NoOfDays': {
                    required: true
                },
                'courseSalesMaster.StartDate': {
                    validatelvctodsd: true
                },
                'courseSalesMaster.EndDate': {
                    validatelvctoded: true
                },
                'courseSalesMaster.RegClosingDate': {
                    required: true
                },
                'courseSalesMaster.MinimumReg': {
                    required: true
                },
                'courseSalesMaster.LeadsOnHead': {
                    required: true
                },
                'courseSalesMaster.Registered': {
                    required: true
                },
                'courseSalesMaster.AvailableSeats': {
                    required: true
                },
                'courseSalesMaster.LeadsOnHeadRemarks': {
                    required: true
                },
                'courseSalesMaster.RegisteredRemarks': {
                    required: true
                },
            }
        });

        function ProductChange(el) {
            if (el.value) {
                $.ajax({
                    url: '@Url.Content("~/CourseDetail/GetCoursesByProduct?Id=")' + el.value,
                    method: 'GET',
                    contentType: 'application/json',
                    success: function (data) {
                        $('#courseSalesMaster_Course').empty();
                        $('#courseSalesMaster_Course').append($('<option></option>').val('').html(''));
                        $('#courseSalesMaster_NoOfDays').val('');
                        $.each(data, function (key, value) {
                            $('#courseSalesMaster_Course').append($('<option></option>').val(value.Id).html(value.CourseName));
                        });
                        $('#courseSalesMaster_Course').removeAttr('disabled');
                    },
                    error: function (err) {

                    }
                });
            }
            else {
                $('#courseSalesMaster_Course').empty();
                $('#courseSalesMaster_Course').attr('disabled', 'disabled');
                $('#courseSalesMaster_Course').append($('<option></option>').val('').html(''));
                $('#courseSalesMaster_NoOfDays').val('');
            }
        }

        function CourseChangeWrapper(val) {
            if (val) {
                $.ajax({
                    url: '@Url.Content("~/Master/GetCourse?Id=")' + val,
                    method: 'GET',
                    contentType: 'application/json',
                    success: function (data) {
                        $('#courseSalesMaster_NoOfDays').val(data.NoOfDays);

                    },
                    error: function (err) {

                    }
                });
            }
            else
                $('#courseSalesMaster_NoOfDays').val('');
        }

        function CourseChange(el) {
            debugger;
            CourseChangeWrapper(el.value);
        }

        function MinimumRegUser() {
            debugger;
            if (!$('#courseSalesMaster_MinimumReg').val()) {
                $('#courseSalesMaster_Registered').val('');
                $('#courseSalesMaster_AvailableSeats').val('');
            }
            else {
                if (parseInt($('#courseSalesMaster_MinimumReg').val()) < parseInt($('#courseSalesMaster_Registered').val())) {
                    alert('Minimum registration is cannot be less than Registered');
                    $('#courseSalesMaster_Registered').val('');
                    $('#courseSalesMaster_AvailableSeats').val($('#courseSalesMaster_MinimumReg').val());
                }
                else {
                    parseInt($('#courseSalesMaster_AvailableSeats').val(parseInt($('#courseSalesMaster_MinimumReg').val()) - ($('#courseSalesMaster_Registered').val() == '' ? 0 : parseInt($('#courseSalesMaster_Registered').val()))));
                }
            }

        }

        function RegisteredUser() {
            debugger;
            if ($('#courseSalesMaster_Registered').val()) {
                if ($('#courseSalesMaster_MinimumReg').val() == '') {
                    alert('Please enter minimum registrations before enter Registered.');
                    $('#courseSalesMaster_Registered').val('');
                    $('#courseSalesMaster_AvailableSeats').val($('#courseSalesMaster_MinimumReg').val());
                }
                else {
                    if (parseInt($('#courseSalesMaster_MinimumReg').val()) < parseInt($('#courseSalesMaster_Registered').val())) {
                        alert('Minimum registration is cannot be less than Registered');
                        $('#courseSalesMaster_Registered').val('');
                        $('#courseSalesMaster_AvailableSeats').val($('#courseSalesMaster_MinimumReg').val());
                    }
                    else {
                        parseInt($('#courseSalesMaster_AvailableSeats').val(parseInt($('#courseSalesMaster_MinimumReg').val()) - ($('#courseSalesMaster_Registered').val() == '' ? 0 : parseInt($('#courseSalesMaster_Registered').val()))));
                    }
                }
            }
            else {
                $('#courseSalesMaster_AvailableSeats').val('');
            }
        }
    </script>

}