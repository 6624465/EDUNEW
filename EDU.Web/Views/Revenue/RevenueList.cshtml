@model IEnumerable<EDU.Web.Models.Revenue>
@{
    ViewBag.Title = "RevenueList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .alignright {
        text-align: right !important;
    }

    .bordertop {
        border-top: 2px solid gray !important;
        border-bottom: 2px solid gray !important;
        color: #D73925;
        /*font-family: 'Bebas Neue'*/
    }

    .bold {
    }

    #gridContent th:nth-child(6), th:nth-child(7), th:nth-child(8), th:nth-child(9) {
        text-align: right !important;
    }

    #gridContent1 th:nth-child(6), th:nth-child(7), th:nth-child(8), th:nth-child(9) {
        text-align: right !important;
    }
</style>
@functions {
    public string ConvertToInt64dollar(decimal? data)
    {
        if (data != null && data > 0)
            return new HtmlString("$ " + Convert.ToInt64(data.Value)).ToString();
        else
            return "";
    }
}
<form name="frmRevenue" id="frmRevenue">
    <div class="page page-forms-elements">
        <div class="page-wrap">
            <div class="panel panel-default">
                <div class="box" id="grid">
                    <div class="box-header">
                        <div style="display:-webkit-inline-box">
                            <h4> Set Revenue</h4>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-1 col-md-offset-3">
                                @Html.DropDownListFor(x => x.FirstOrDefault().Year, Enumerable.Range(2014, 14).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), "Select Year ", new { @class = "form-control input-sm", onchange = "CountryChange(this);" })
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownListFor(x => x.FirstOrDefault().Country,
                             new SelectList((List<EZY.EDU.Contract.Branch>)ViewData["CountryData"], "BranchID", "BranchName"),
                             "Select Country", new { @class = "form-control input-sm", onchange = "CountryChange(this);" })
                            </div>
                            <div class="col-md-1">
                                @Html.DropDownListFor(x => x.FirstOrDefault().CurrencyCode,
                             new SelectList((List<EDU.Web.Models.Lookup>)ViewData["CurrencyList"], "LookupCode", "LookupCode"),
                             "Select Currency", new { @class = "form-control input-sm" })
                            </div>
                            @*<div class="col-md-2">
                                    <label class="control-label">CONVERSION RATE</label>
                                </div>*@
                            <div class="col-md-1">
                                @Html.TextBoxFor(x => x.FirstOrDefault().CurrencyExRate, "{0:#.#}",
                                new { placeholder = "CONVERSION RATE", @class = "form-control input-sm numCss" })
                            </div>
                            <div class="col-md-1">
                                @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                                {
                                    <button type="button" onclick="updateRevenueInfoByExRate()" class="btn btn-primary btn-sm pull-right"><i class="fa fa-floppy-o"></i>&nbsp;Update</button>
                                }
                            </div>
                            <div class="col-md-2"></div>
                        </div>
                        <div class="row css10">
                            <div class="col-md-6 col-md-offset-3 ">
                                @{
                                    var grid = new WebGrid(Model);
                                }
                                <div id="gridContent">
                                    @grid.GetHtml(
                                     tableStyle: "table table-striped table-bordered",
                                     headerStyle: "webgrid-header",
                                     mode: WebGridPagerModes.All,
                                     columns:
                                        grid.Columns(
                                        grid.Column("YearlyTargetAmt", header: "", format: @<input type="hidden" name="YearlyTargetAmt" value="@item.YearlyTargetAmt" />, style: "width0"),
                                        grid.Column("HalfYearlyTargetAmt", header: "", format: @<input type="hidden" name="HalfYearlyTargetAmt" value="@item.HalfYearlyTargetAmt" />, style: "width0"),
                                        grid.Column("QuarterlyTargetAmt", header: "", format: @<input type="hidden" name="QuarterlyTargetAmt" value="@item.QuarterlyTargetAmt" />, style: "width0"),
                                        grid.Column("MonthlyTargetAmt", header: "", format: @<input type="hidden" name="MonthlyTargetAmt" value="@item.MonthlyTargetAmt" />, style: "width0"),

                                            @*grid.Column("Action", format: @<text>
                                                        @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                                                        {
                                                            <button type="button" class="edit-user display-mode btn btn-primary btn-xs waves-effect"><i class="fa fa-pencil-square-o" style="padding-left: 5px;"></i></button>
                                                        }
                                                        <button type="button" class="save-user edit-mode btn btn-success btn-xs waves-effect" onclick="SaveRevenue(@item.RevenueId,@item.Product,@item.Year,'@item.ProductName')"><i class="fa fa-floppy-o" style="padding-left: 5px;"></i></button>
                                                        <button type="button" class="cancel-user edit-mode btn btn-default btn-xs waves-effect"><i class="fa fa-times" style="padding-left: 5px;"></i></button>
                                                </text>, style: "col3Width", canSort: false),*@

                                        grid.Column("ProductName", "Product Name", format: @<text>  @item.ProductName  </text>, style: ""),
                                        grid.Column("YearlyTarget", "YearlyTarget", format:
                                        @<text> <span class="display-mode"> @ConvertToInt64dollar(item.YearlyTarget) </span>  <input type="text" name="YearlyTarget" id="YearlyTarget" value="@(item.HalfYearlyTarget > 0 ?Convert.ToInt64(item.YearlyTarget) : "")" class="edit-mode numCss" /> </text>, style: "YearlyTarget alignright"),
                                        grid.Column("HalfYearlyTarget", "Half Yearly", format:
                                        @<text> <span class="display-mode"> @ConvertToInt64dollar(item.HalfYearlyTarget)</span>  </text>, style: "HalfYearlyTarget alignright"),
                                        grid.Column("QuarterlyTarget", "Quarterly", format:
                                        @<text>  <span class="display-mode">@ConvertToInt64dollar(item.QuarterlyTarget)</span>   </text>, style: "QuarterlyTarget alignright"),
                                        grid.Column("MonthlyTarget", "Monthly", format:
                                        @<text> <span class="display-mode">@ConvertToInt64dollar(item.MonthlyTarget)  </span> </text>, style: "MonthlyTarget alignright"),
                                        grid.Column("Action", format: @<text>
                                                @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                                                {
                                                    <button type="button" class="edit-user display-mode btn btn-primary btn-xs waves-effect"><i class="fa fa-pencil-square-o" style="padding-left: 5px;"></i></button>
                                                }
                                                <button type="button" class="save-user edit-mode btn btn-success btn-xs waves-effect" onclick="SaveRevenue(@item.RevenueId,@item.Product,@item.Year,'@item.ProductName')"><i class="fa fa-floppy-o" style="padding-left: 5px;"></i></button>
                                                <button type="button" class="cancel-user edit-mode btn btn-default btn-xs waves-effect"><i class="fa fa-times" style="padding-left: 5px;"></i></button>
                                        </text>, style: "col3Width", canSort: false)
                                        ))
                                </div>
                            </div>

                            @*<div class="col-md-6 col-md-offset-3 css10">
                                    @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                                    {
                                        <button type="button" onclick="updateRevenueInfoByExRate()" class="btn btn-primary btn-sm pull-right"><i class="fa fa-floppy-o"></i>&nbsp;Update</button>
                                    }
                                </div>*@
                            <div class="col-md-6 col-md-offset-3 css10">
                                @{
                                    var grid1 = new WebGrid(Model);
                                }
                                <div id="gridContent1">
                                    @grid1.GetHtml(
                                     tableStyle: "table table-striped table-bordered",
                                     mode: WebGridPagerModes.All,
                                     columns:
                                        grid1.Columns(
                                        grid1.Column("YearlyTarget", header: "", format: @<input type="hidden" name="YearlyTarget" value="@item.YearlyTarget" />, style: "width0"),
                                        grid1.Column("HalfYearlyTarget", header: "", format: @<input type="hidden" name="HalfYearlyTarget" value="@item.HalfYearlyTarget" />, style: "width0"),
                                        grid1.Column("QuarterlyTarget", header: "", format: @<input type="hidden" name="QuarterlyTarget" value="@item.QuarterlyTarget" />, style: "width0"),
                                        grid1.Column("MonthlyTarget", header: "", format: @<input type="hidden" name="MonthlyTarget" value="@item.MonthlyTarget" />, style: "width0"),
                                        grid1.Column("ProductName", "Product Name", format: @<text> @item.ProductName</text>, style: ""),
                                        grid1.Column("YearlyTargetAmt", "Yearly Target", format: @<text> @(item.YearlyTargetAmt > 0 ? Convert.ToInt64(item.YearlyTargetAmt) : "")</text>, style: "YearlyTargetAmt alignright"),
                                        grid1.Column("HalfYearlyTargetAmt", "Half Yearly", format: @<text> @(item.HalfYearlyTargetAmt > 0 ? Convert.ToInt64(item.HalfYearlyTargetAmt) : "")</text>, style: "HalfYearlyTargetAmt alignright"),
                                        grid1.Column("QuarterlyTargetAmt", "Quarterly", format: @<text> @(item.QuarterlyTargetAmt > 0 ? Convert.ToInt64(item.QuarterlyTargetAmt) : "")</text>, style: "QuarterlyTargetAmt alignright"),
                                        grid1.Column("MonthlyTargetAmt", "Monthly", format: @<text> @(item.MonthlyTargetAmt > 0 ? Convert.ToInt64(item.MonthlyTargetAmt) : "")</text>, style: "MonthlyTargetAmt alignright"),
                                        grid1.Column("", format: @<text>
                                                <div style="width:35px;"></div>
                                        </text>, style: "col3Width", canSort: false)
                                        ))
                                </div>

                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section SectionScripts {

    <script type="text/javascript">
        $(function () {
            $('#liRevenueList').addClass('active');
        });
        $(document).ready(function () {
            $('#gridContent td:nth-child(1),th:nth-child(1)').hide();
            $('#gridContent td:nth-child(2),th:nth-child(2)').hide();
            $('#gridContent td:nth-child(3),th:nth-child(3)').hide();
            $('#gridContent td:nth-child(4),th:nth-child(4)').hide();


            $('#gridContent1 td:nth-child(1),th:nth-child(1)').hide();
            $('#gridContent1 td:nth-child(2),th:nth-child(2)').hide();
            $('#gridContent1 td:nth-child(3),th:nth-child(3)').hide();
            $('#gridContent1 td:nth-child(4),th:nth-child(4)').hide();

            var totalyt = 0;
            var totalhyt = 0;
            var totalqyt = 0;
            var totalmt = 0;

            $('#gridContent .YearlyTarget').each(function () {
                totalyt = totalyt + parseInt($(this)[0].innerText.replace('$', '').trim() == "" ? 0 : $(this)[0].innerText.replace('$', '').toLocaleString());
            });
            $('#gridContent .HalfYearlyTarget').each(function () {
                totalhyt = totalhyt + parseInt($(this)[0].innerText.replace('$', '').trim() == "" ? 0 : $(this)[0].innerText.replace('$', '').toLocaleString());
            });
            $('#gridContent .QuarterlyTarget').each(function () {
                totalqyt = totalqyt + parseInt($(this)[0].innerText.replace('$', '').trim() == "" ? 0 : $(this)[0].innerText.replace('$', '').toLocaleString());
            });
            $('#gridContent .MonthlyTarget').each(function () {
                totalmt = totalmt + parseInt($(this)[0].innerText.replace('$', '').trim() == "" ? 0 : $(this)[0].innerText.replace('$', '').toLocaleString());
            });
            $('#gridContent tbody').append('<tr class="bordertop"><td>Summary</td><td class="alignright">' + "$ " + totalyt + '</td><td class="alignright">' + "$ " + totalhyt + '</td><td class="alignright">' + "$ " + totalqyt + '</td><td  class="alignright">' + "$ " + totalmt + '</td><td></td></tr>');

            var totalytamt = 0;
            var totalhytamt = 0;
            var totalqytamt = 0;
            var totalmtamt = 0;
            $('#gridContent1 .YearlyTargetAmt').each(function () {
                totalytamt = totalytamt + parseInt($(this)[0].innerText.trim() == "" ? 0 : $(this)[0].innerText.toLocaleString());
            });
            $('#gridContent1 .HalfYearlyTargetAmt').each(function () {
                totalhytamt = totalhytamt + parseInt($(this)[0].innerText.trim() == "" ? 0 : $(this)[0].innerText.toLocaleString());
            });
            $('#gridContent1 .QuarterlyTargetAmt').each(function () {
                totalqytamt = totalqytamt + parseInt($(this)[0].innerText.trim() == "" ? 0 : $(this)[0].innerText.toLocaleString());
            });
            $('#gridContent1 .MonthlyTargetAmt').each(function () {
                totalmtamt = totalmtamt + parseInt($(this)[0].innerText.trim() == "" ? 0 : $(this)[0].innerText.toLocaleString());
            });
            $('#gridContent1 tbody').append('<tr class="bordertop"><td>Summary</td><td class="alignright">' + totalytamt + '</td><td class="alignright">' + totalhytamt + '</td><td class="alignright">' + totalqytamt + '</td><td class="alignright">' + totalmtamt + '</td><td></td></tr>');
        });
    </script>

    <script type="text/javascript">

        $('#frmRevenue').validate({
            rules: {
                'Year': {
                    required: true
                },
                'Country': {
                    required: true
                },
                'CurrencyCode': {
                    required: true
                },
                'CurrencyExRate': {
                    required: true
                },
                'YearlyTarget': {
                    required: true
                }
            }
        });

       

        function updateRevenueInfoByExRate() {
            if ($('#frmRevenue').valid()) {
                swal({
                    title: "Are you sure?",
                    text: "Do you want update?",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonClass: "btn-danger",
                    confirmButtonText: "Yes, update it!",
                    closeOnConfirm: false
                },
            function () {
                var Revenue =
                    {
                        "CurrencyExRate": $('#CurrencyExRate').val(),
                        "Country": $('#Country').val(),
                        "CurrencyCode": $('#CurrencyCode').val(),
                        "Year": $('#Year').val()
                    };
                $.ajax({
                    url: '@Url.Content("~/Revenue/updateRevenueInfoByExRate/")',
                    data: JSON.stringify(Revenue),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        swal(data)
                        location.reload(true);
                    }
                });
            });
            }
        }


        var Product = null;
        var ProductName = null;
        var RevenueId = null;
        var Year = null;

        function SaveRevenue(revenueId, product, year, productName) {
            Product = product;
            ProductName = productName;
            RevenueId = revenueId;
            Year = year;
        }
        function CountryChange(el) {
            if ($('#Country').val() != '' && $('#Year').val() != '') {
                window.location = '@Url.Action("RevenueList", "Revenue", new { country = "", year="" })' + '?country=' + $('#Country').val() + '&year=' + $('#Year').val();
            }
            else {
                $("#CurrencyCode").val('');
            }
        };

        $(function () {
            @if (Session["UserID"].ToString().ToUpper() != "ADMIN")
            {
                <text>
            $('#Country').attr('disabled', 'disabled');
            </text>
            }

            $("#CurrencyCode").val('@Model.FirstOrDefault().CurrencyCode');

            $('.edit-mode').hide();
            $('.edit-user, .cancel-user').on('click', function () {
                var tr = $(this).parents('tr:first');
                tr.find('.edit-mode, .display-mode').toggle();
            });

            $('.save-user').on('click', function () {
                if ($('#frmRevenue').valid()) {
                    var tr = $(this).parents('tr:first');

                    //var Product = tr.find("#hdnProduct").val();
                    //var ProductName = tr.find("#hdnProductName").val();
                    var YearlyTarget = tr.find("#YearlyTarget").val();
                    //var RevenueId = tr.find("#hdnRevenueId").val();
                    //var Year = tr.find("#hdnYear").val();

                    tr.find('.edit-mode, .display-mode').toggle();
                    var Revenue =
                        {
                            "RevenueId": RevenueId,
                            "Product": Product,
                            "ProductName": ProductName,
                            "YearlyTarget": YearlyTarget,
                            "CurrencyExRate": $('#CurrencyExRate').val(),
                            "Country": $('#Country').val(),
                            "CountryName": $("#Country option:selected").text(),
                            "CurrencyCode": $('#CurrencyCode').val(),
                            "Year": $('#Year').val()
                        };
                    $.ajax({
                        url: '@Url.Content("~/Revenue/SaveRevenueInfo/")',
                        data: JSON.stringify(Revenue),
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            alert(data);
                            location.reload(true);
                        }
                    });
                }
            });
        })
    </script>
}
