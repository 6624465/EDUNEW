@model IEnumerable<EDU.Web.Models.Revenue>
@{
    ViewBag.Title = "RevenueList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<form name="frmRevenue" id="frmRevenue">
    <section class="content">
        <div class="box box-dnex">
            <div class="box-header with-border">
                <div class="row">
                    <section class="content-header">
                        <ol class="breadcrumb">
                            <li><a href='@Url.Content("~/Home/Education")'><i class="fa fa-dashboard"></i> Home</a></li>
                            <li class="active">Revenue</li>
                        </ol>
                    </section>
                </div>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="col-md-2"></div>
                    <div class="col-md-2">
                        @Html.DropDownListFor(x => x.FirstOrDefault().Country,
                             new SelectList((List<EZY.EDU.Contract.Branch>)ViewData["CountryData"], "BranchID", "BranchName"),
                             "Select Country", new { @class = "form-control input-sm", onchange = "CountryChange(this);" })
                    </div>
                    <div class="col-md-1">
                        @Html.DropDownListFor(x => x.FirstOrDefault().CurrencyCode,
                             new SelectList((List<EZY.EDU.Contract.Lookup>)ViewData["CurrencyList"], "LookupCode", "LookupCode"),
                             "Select Currency", new { @class = "form-control input-sm" })
                    </div>
                    @*<div class="col-md-2">
                            <label class="control-label">CONVERSION RATE</label>
                        </div>*@
                    <div class="col-md-1">
                        @Html.TextBoxFor(x => x.FirstOrDefault().CurrencyExRate, "{0:#.#}",
           new { placeholder = "CONVERSION RATE", @class = "form-control input-sm numCss" })
                    </div>
                    <div class="col-md-3"></div>
                </div>
                <div class="row css10">
                    <div class="col-md-12">
                        @{
                            var grid = new WebGrid(Model);
                        }
                        <div id="gridContent">
                            @grid.GetHtml(
                                     tableStyle: "table table-striped",
                                     mode: WebGridPagerModes.All,
                                     columns:
                                         grid.Columns(
                                         grid.Column("ProductName", "Product Name", format: @<text>  @item.ProductName  </text>, style: ""),
                                         grid.Column("YearlyTarget", "YearlyTarget", format: @<text> <span class="display-mode"> @(item.HalfYearlyTarget > 0 ? item.YearlyTarget.ToString("0.00") : "") </span>  <input type="text" name="YearlyTarget" id="YearlyTarget" value="@(item.HalfYearlyTarget > 0 ? item.YearlyTarget.ToString("0.00") : "")" class="edit-mode numCss" /> </text>, style: ""),
                                         grid.Column("HalfYearlyTarget", "Half Yearly", format: @<text>  @(item.HalfYearlyTarget > 0 ? item.HalfYearlyTarget.ToString("0.00") : "")  </text>, style: ""),
                                         grid.Column("QuarterlyTarget", "Quarterly", format: @<text>  @(item.QuarterlyTarget > 0 ? item.QuarterlyTarget.ToString("0.00") : "")   </text>, style: ""),
                                         grid.Column("MonthlyTarget", "Monthly", format: @<text>  @(item.MonthlyTarget > 0 ? item.MonthlyTarget.ToString("0.00") : "")   </text>, style: ""),
                                         grid.Column("Action", format: @<text>
                                                @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                                                {
                                                    <button type="button" class="edit-user display-mode btn btn-primary btn-xs waves-effect"><i class="fa fa-pencil-square-o" style="padding-left: 5px;"></i></button>
                                                }
                                                <button type="button" class="save-user edit-mode btn btn-success btn-xs waves-effect" onclick="SaveRevenue(@item.RevenueId,@item.Product,@item.Year,'@item.ProductName')"><i class="fa fa-floppy-o" style="padding-left: 5px;"></i></button>
                                                <button type="button" class="cancel-user edit-mode btn btn-default btn-xs waves-effect"><i class="fa fa-times" style="padding-left: 5px;"></i></button>
                                        </text>, style: "col3Width", canSort: false)
                                        ))
                        </div>
                    </div>

                    <div class="col-md-12 css10">
                        @if (Session["UserID"].ToString().ToUpper() == "ADMIN")
                        {
                            <button type="button" onclick="updateRevenueInfoByExRate()" class="btn btn-primary btn-sm pull-right"><i class="fa fa-floppy-o"></i>&nbsp;Update</button>
                        }
                    </div>
                    <div class="col-md-12 css10">
                        @{
                            var grid1 = new WebGrid(Model);
                        }
                        <div id="gridContent">
                            @grid1.GetHtml(
                                     tableStyle: "table table-striped",
                                     mode: WebGridPagerModes.All,
                                     columns:
                                         grid1.Columns(
                                         grid1.Column("ProductName", "Product Name", format: @<text> @item.ProductName</text>, style: ""),
                                         grid1.Column("YearlyTargetAmt", "Yearly Target", format: @<text> @(item.YearlyTargetAmt > 0 ? item.YearlyTargetAmt.ToString("0.00") : "")</text>, style: ""),
                                         grid1.Column("HalfYearlyTargetAmt", "Half Yearly", format: @<text> @(item.HalfYearlyTargetAmt > 0 ? item.HalfYearlyTargetAmt.ToString("0.00") : "")</text>, style: ""),
                                         grid1.Column("QuarterlyTargetAmt", "Quarterly", format: @<text> @(item.QuarterlyTargetAmt > 0 ? item.QuarterlyTargetAmt.ToString("0.00") : "")</text>, style: ""),
                                         grid1.Column("MonthlyTargetAmt", "Monthly", format: @<text> @(item.MonthlyTargetAmt > 0 ? item.MonthlyTargetAmt.ToString("0.00") : "")</text>, style: ""),
                                         grid1.Column("", format: @<text>
                                        </text>, style: "col3Width", canSort: false)
                                        ))
                        </div>

                    </div>
                </div>

            </div>
        </div>
    </section>
</form>

@section SectionScripts {
    <script type="text/javascript">
        debugger;
        $(function () {
            debugger;
            $('#liRevenueList').addClass('active');
        });

    $('#frmRevenue').validate({
        rules: {
            'Country': {
                required: true
            },
            'CurrencyCode': {
                required: true
            },
            'CurrencyExRate': {
                required: true
            },
            'YearlyTarget': {
                required: true
            }
        }
    });

        function updateRevenueInfoByExRate() {
            if ($('#frmRevenue').valid()) {
                var Revenue =
                    {
                        "CurrencyExRate": $('#CurrencyExRate').val(),
                        "Country": $('#Country').val(),
                        "CurrencyCode": $('#CurrencyCode').val(),
                        "Year": 2017
                    };
                $.ajax({
                    url: '@Url.Content("~/Revenue/updateRevenueInfoByExRate/")',
                    data: JSON.stringify(Revenue),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        alert(data);
                        location.reload(true);
                    }
                });
            }
        }

    var Product = null;
    var ProductName = null;
    var RevenueId = null;
    var Year = null;

    function SaveRevenue(revenueId, product, year, productName)
    {
         Product = product;
         ProductName = productName;
         RevenueId = revenueId;
         Year = year;
    }
    function CountryChange(el) {
        if (el.value) {
            window.location = '@Url.Action("RevenueList", "Revenue", new { country = "", year="" })' + '?country=' + el.value + '&year=' + 2017;
                @*$.ajax({
                    url: '@Url.Content("~/Revenue/GetCurrency?Id=")' + el.value,
                    method: 'GET',
                    contentType: 'application/json',
                    success: function (data) {
                        debugger;
                        $("#CurrencyCode").val(data);
                    },
                    error: function (err) {
                    }
                });*@
            }
        else
            {
                $("#CurrencyCode").val('');
            }
    };

    $(function () {

        $("#CurrencyCode").val('@Model.FirstOrDefault().CurrencyCode');

        $('.edit-mode').hide();
        $('.edit-user, .cancel-user').on('click', function () {
            var tr = $(this).parents('tr:first');
            tr.find('.edit-mode, .display-mode').toggle();
        });

        $('.save-user').on('click', function () {
            if ($('#frmRevenue').valid()) {
            var tr = $(this).parents('tr:first');

            //var Product = tr.find("#hdnProduct").val();
            //var ProductName = tr.find("#hdnProductName").val();
            var YearlyTarget = tr.find("#YearlyTarget").val();
            //var RevenueId = tr.find("#hdnRevenueId").val();
            //var Year = tr.find("#hdnYear").val();

            tr.find('.edit-mode, .display-mode').toggle();
            var Revenue =
                {
                    "RevenueId": RevenueId,
                    "Product": Product,
                    "ProductName": ProductName,
                    "YearlyTarget": YearlyTarget,
                    "CurrencyExRate": $('#CurrencyExRate').val(),
                    "Country": $('#Country').val(),
                    "CountryName": $("#Country option:selected").text(),
                    "CurrencyCode": $('#CurrencyCode').val(),
                    "Year": Year
                };
            $.ajax({
                url: '@Url.Content("~/Revenue/SaveRevenueInfo/")',
                data: JSON.stringify(Revenue),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    alert(data);
                    location.reload(true);
                }
            });
        }
        });
    })
    </script>
}
