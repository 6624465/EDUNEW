@model EDU.Web.ViewModels.FinancialTransactionModel.FinancialTransactionsVM
@{
    // ViewBag.Title = "FinancialTransactionDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page page-forms-elements">
    @using (Html.BeginForm("SaveFinancialTransactionDetail", "FinancialTransaction", FormMethod.Post, new { id = "frmFinancialTransaction", name = "frmFinancialTransaction", enctype = "multipart/form-data", autocomplete = "off" }))
    {
        @Html.HiddenFor(x => x.FinancialTransactionId)
        @Html.HiddenFor(x => x.Year)
        @Html.HiddenFor(x => x.Month)
        @Html.HiddenFor(x => x.IsSubmit)
        <div class="page-wrap">
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default panel-hovered panel-stacked mb30">
                        <div class="panel-heading">@ViewBag.Title</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="form-group">
                                    <div class="col-md-2 col-md-offset-1">
                                        @Html.TextBoxFor(x => x.TrainingConfirmationID, new { @class = "form-control input-sm", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.DropDownListFor(x => x.Country,
                        new SelectList((List<EZY.EDU.Contract.Branch>)ViewData["CountryData"], "BranchId", "BranchName"),
                        "Select Country", new { @class = "form-control input-sm", @disabled = "disabled" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.DropDownListFor(x => x.CurrencyCode,
                                        new SelectList((List<EDU.Web.Models.Lookup>)ViewData["CurrencyList"], "LookupCode", "LookupCode"),
                                              "Select Currency", new { @class = "form-control  input-sm" })
                                    </div>
                                    <div class="col-md-1">
                                        @Html.TextBoxFor(x => x.CurrencyExRate, "{0:#.#}", new { @class = "form-control numCss input-sm", @placeholder = "Ex Rate", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                </div>
                            </div>
                            <hr />
                            <div class="row">
                                <div class="col-md-2 col-md-offset-2">
                                    <h4>Amount</h4>
                                </div>
                                <div class="col-md-2">
                                    <h4>Local Amount</h4>
                                </div>
                                <div class="col-md-2">
                                    <h4>Reference Doc</h4>
                                </div>
                                <div class="col-md-2">
                                    <h4>Remarks</h4>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span>Total Revenue</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TotalRevenueAmount, "{0:#.#}", new { @class = "form-control numCss",  @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TotalRevenueLocalAmount, "{0:#.#}", new { @class = "form-control numCss", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TotalRevenueFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.TotalRevenueReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.TotalRevenueRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span> Trainer Fee</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerExpensesAmount, "{0:#.#}", new { @class = "form-control numCss", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerExpensesLocalAmount, "{0:#.#}", new { @class = "form-control numCss", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerExpensesFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.TrainerExpensesReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.TrainerExpensesRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span style="white-space:nowrap"> Trainer Airfare</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerTravelExpensesAmount, "{0:#.#}", new { @class = "form-control numCss", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerTravelExpensesLocalAmount, "{0:#.#}", new { @class = "form-control", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerTravelExpensesFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.TrainerTravelExpensesReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.TrainerTravelExpensesRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span> Hotel Bookings</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.LocalExpensesAmount, "{0:#.#}", new { @class = "form-control numCss", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.LocalExpensesLocalAmount, "{0:#.#}", new { @class = "form-control", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.LocalExpensesFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.LocalExpensesReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.LocalExpensesRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span>Trainer Claims</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerClaimsAmount, "{0:#.#}", new { @class = "form-control numCss", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerClaimsLocalAmount, "{0:#.#}", new { @class = "form-control", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.TrainerClaimsFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.TrainerClaimsReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.TrainerClaimsRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span>Regional expneses</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.MiscExpensesAmount, "{0:#.#}", new { @class = "form-control numCss", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.MiscExpensesLocalAmount, "{0:#.#}", new { @class = "form-control", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.MiscExpensesFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.MiscExpensesReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.MiscExpensesRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-2 control-label">
                                        <span>Courseware Material</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.CoursewareMaterialAmount, "{0:#.#}", new { @class = "form-control numCss", onkeyup = "calculateLocalAmount();calculateGrossProfitandLoss()" })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.CoursewareMaterialLocalAmount, "{0:#.#}", new { @class = "form-control", @readonly = true })
                                    </div>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.CoursewareMaterialFileName, new { @class = "form-control", type = "file" })&nbsp;@Model.CoursewareMaterialReferenceDoc
                                    </div>
                                    <div class="col-md-4">
                                        @Html.TextAreaFor(x => x.CoursewareMaterialRemarks, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group">
                                    <label class="col-md-1 control-label col-md-offset-1">
                                        <span>Gross Profit</span>
                                    </label>
                                    <div class="col-md-2">
                                        @Html.TextBoxFor(x => x.GrossProfit, "{0:#.#}", new { @class = "form-control numCss", @placeholder = "Gross Profit", @readonly = true })
                                    </div>
                                    <label class="col-md-1 control-label">
                                        <span style="white-space:nowrap">Profit & Loss</span>
                                    </label>
                                    <div class="col-md-1">
                                        @Html.TextBoxFor(x => x.ProfitAndLossPercent, "{0:#.#}", new { @class = "form-control", @placeholder = "Profit&Loss", @readonly = true })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="text-center">
                                        @*<button type="button" onclick="SubmitFinancialTransaction()" class="btn btn-success btn-sm btndisable"><i class="fa fa-floppy-o"></i>&nbsp;Submit</button> &nbsp;&nbsp;&nbsp;*@
                                        <button type="button" onclick="SaveFinancialTransactionDetail()" class="btn btn-success btn-frmt green btn-sm editdisable"><i class="fa fa-floppy-o"></i>&nbsp;Save</button> &nbsp;&nbsp;&nbsp;
                                        <button class="btn btn-default btn-sm" type="button" onclick="navigateToList();"><i class="fa fa-backward"></i>&nbsp;Back</button>&nbsp;&nbsp;&nbsp;
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@section SectionScripts{
    <script type="text/javascript">
     
        $("#frmFinancialTransaction").validate({
            rules: {
                CurrencyCode: "required",
                CurrencyExRate: "required",
            },

            highlight: function (element, errorClass, validClass) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().addClass(errorClass);
                } else {
                    elem.addClass(errorClass);
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().removeClass(errorClass);
                } else {
                    elem.removeClass(errorClass);
                }
            },
            errorPlacement: function (error, element) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    element = $("#select2-" + elem.attr("id") + "-container").parent();
                    error.insertAfter(element);
                } else {
                    error.insertAfter(element);
                }
            }
        });
        $('select').select2({}).on("change", function (e) {
            $(this).valid()
        });

        function SaveFinancialTransactionDetail() {
            debugger;
            if ($('#frmFinancialTransaction').valid()) {
                $('#Country').removeAttr('disabled');
                $('#TrainingConfirmationID').removeAttr('disabled');
                $('#TotalRevenueAmount').removeAttr('disabled');
                $('#frmFinancialTransaction').submit();
            }
        }
        function navigateToList() {
            var month = $('#Month').val();
            var year = $('#Year').val();
            location.href = '@Url.Content("~/FinancialTransaction/FinancialTransactionList?month=")' + month + '&year=' + year;
        }
        function calculateLocalAmount() {
            var currencyrt = ($('#CurrencyExRate').val() != null && !isNaN($('#CurrencyExRate').val()) ? parseInt($('#CurrencyExRate').val()) : 0);
            var totalRevenueAmount = parseInt($('#TotalRevenueAmount').val());
            var trainerExpensesAmount = ($('#TrainerExpensesAmount').val() != null && !isNaN($('#TrainerExpensesAmount').val()) ? parseInt($('#TrainerExpensesAmount').val()) : 0);
            var trainerTravelExpensesAmount = ($('#TrainerTravelExpensesAmount').val() != null && !isNaN($('#TrainerTravelExpensesAmount').val()) ? parseInt($('#TrainerTravelExpensesAmount').val()) : 0);
            var localExpensesAmount = ($('#LocalExpensesAmount').val() != null && !isNaN($('#LocalExpensesAmount').val()) ? parseInt($('#LocalExpensesAmount').val()) : 0);
            var coursewareMaterialAmount = ($('#CoursewareMaterialAmount').val() != null && !isNaN($('#CoursewareMaterialAmount').val()) ? parseInt($('#CoursewareMaterialAmount').val()) : 0);
            var miscExpensesAmount = ($('#MiscExpensesAmount').val() != null && !isNaN($('#MiscExpensesAmount').val()) ? parseInt($('#MiscExpensesAmount').val()) : 0);
            var trainerClaimsAmount = ($('#TrainerClaimsAmount').val() != null && !isNaN($('#TrainerClaimsAmount').val()) ? parseInt($('#TrainerClaimsAmount').val()) : 0);

            $('#TotalRevenueLocalAmount').val('');
            $('#TrainerExpensesLocalAmount').val('');
            $('#TrainerTravelExpensesLocalAmount').val('');
            $('#LocalExpensesLocalAmount').val('');
            $('#CoursewareMaterialLocalAmount').val('');
            $('#MiscExpensesLocalAmount').val('');
            $('#TrainerClaimsLocalAmount').val('');

            if (currencyrt > 0) {
                $('#TotalRevenueLocalAmount').val(currencyrt * totalRevenueAmount);

                if (trainerExpensesAmount > 0)
                    $('#TrainerExpensesLocalAmount').val(currencyrt * trainerExpensesAmount);
                else
                    $('#TrainerExpensesLocalAmount').val('');
                if (trainerTravelExpensesAmount > 0)
                    $('#TrainerTravelExpensesLocalAmount').val(currencyrt * trainerTravelExpensesAmount);
                else
                    $('#TrainerTravelExpensesLocalAmount').val('');
                if (localExpensesAmount > 0)
                    $('#LocalExpensesLocalAmount').val(currencyrt * localExpensesAmount);
                else
                    $('#LocalExpensesLocalAmount').val('');
                if (coursewareMaterialAmount > 0)
                    $('#CoursewareMaterialLocalAmount').val(currencyrt * coursewareMaterialAmount);
                else
                    $('#CoursewareMaterialLocalAmount').val('');
                if (miscExpensesAmount > 0)
                    $('#MiscExpensesLocalAmount').val(currencyrt * miscExpensesAmount);
                else
                    $('#MiscExpensesLocalAmount').val('');
                if (trainerClaimsAmount > 0)
                    $('#TrainerClaimsLocalAmount').val(currencyrt * trainerClaimsAmount);
                else
                    $('#TrainerClaimsLocalAmount').val('');
            }
        }
        function calculateGrossProfitandLoss() {
            debugger;
            var totalRevenueAmount = parseInt($('#TotalRevenueAmount').val());
            var trainerExpensesAmount = ($('#TrainerExpensesAmount').val() != '' && $('#TrainerExpensesAmount').val() != null && !isNaN($('#TrainerExpensesAmount').val()) ? parseInt($('#TrainerExpensesAmount').val()) : 0);
            var trainerTravelExpensesAmount = ($('#TrainerTravelExpensesAmount').val() != '' && $('#TrainerTravelExpensesAmount').val() != null && !isNaN($('#TrainerTravelExpensesAmount').val()) ? parseInt($('#TrainerTravelExpensesAmount').val()) : 0);
            var localExpensesAmount = ($('#LocalExpensesAmount').val() != '' && $('#LocalExpensesAmount').val() != null && !isNaN($('#LocalExpensesAmount').val()) ? parseInt($('#LocalExpensesAmount').val()) : 0);
            var coursewareMaterialAmount = ($('#CoursewareMaterialAmount').val() != '' && $('#CoursewareMaterialAmount').val() != null && !isNaN($('#CoursewareMaterialAmount').val()) ? parseInt($('#CoursewareMaterialAmount').val()) : 0);
            var miscExpensesAmount = ($('#MiscExpensesAmount').val() != '' && $('#MiscExpensesAmount').val() != null && !isNaN($('#MiscExpensesAmount').val()) ? parseInt($('#MiscExpensesAmount').val()) : 0);
            var trainerClaimsAmount = ($('#TrainerClaimsAmount').val() != '' && $('#TrainerClaimsAmount').val() != null && !isNaN($('#TrainerClaimsAmount').val()) ? parseInt($('#TrainerClaimsAmount').val()) : 0);

            var expenses = trainerExpensesAmount + trainerTravelExpensesAmount + localExpensesAmount + coursewareMaterialAmount + miscExpensesAmount + trainerClaimsAmount;
            var result = totalRevenueAmount - expenses;
            var pro = ((result * 100) / totalRevenueAmount).toFixed();
            $('#GrossProfit').val(result);
            $('#ProfitAndLossPercent').val(pro);
        }
        function SubmitFinancialTransaction() {
            if ($('#frmFinancialTransaction').valid()) {
                var FinancialTransaction =
                    {
                        "FinancialTransactionId": $('#FinancialTransactionId').val(),
                        "TrainingConfirmationID": $('#TrainingConfirmationID').val()
                    };
                $.ajax({
                    url: '@Url.Content("~/FinancialTransaction/SubmitFinancialTransaction/")',
                    data: JSON.stringify(FinancialTransaction),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        alert(data);
                        location.reload(true);
                    }
                });
            }
        }

        @if (Model.FinancialTransactionId != -1)
            {
                <text>
        debugger;
        if ($('#IsSubmit').val() != "True")
            $('.btndisable').removeAttr('disabled');
        else {
            $('.btndisable').attr('disabled', 'disabled');
            $('.editdisable').attr('disabled', 'disabled');
        }
        </text>
             }
        else
        {
            <text>$('.btndisable').attr('disabled', 'disabled');</text>
        }
    </script>
}

